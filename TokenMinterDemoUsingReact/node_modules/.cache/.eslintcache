[{"D:\\Blockchain\\test-react\\src\\index.js":"1","D:\\Blockchain\\test-react\\src\\App.js":"2","D:\\Blockchain\\test-react\\src\\component\\MintLedger.js":"3","D:\\Blockchain\\test-react\\src\\component\\MintForm.js":"4","D:\\Blockchain\\test-react\\src\\component\\MintFeedback.js":"5","D:\\Blockchain\\test-react\\src\\token\\Token.js":"6","D:\\Blockchain\\test-react\\src\\token\\component\\TokenInfo.js":"7","D:\\Blockchain\\test-react\\src\\token\\component\\TransferTokenForm.js":"8","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\index.js":"9","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\App.js":"10","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\Token.js":"11","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintFeedback.js":"12","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintForm.js":"13","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintLedger.js":"14","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\component\\TransferTokenForm.js":"15","D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\component\\TokenInfo.js":"16"},{"size":510,"mtime":1652604801171,"results":"17","hashOfConfig":"18"},{"size":3326,"mtime":1652605908421,"results":"19","hashOfConfig":"18"},{"size":786,"mtime":1652596623785,"results":"20","hashOfConfig":"18"},{"size":730,"mtime":1652594823182,"results":"21","hashOfConfig":"18"},{"size":595,"mtime":1652597867326,"results":"22","hashOfConfig":"18"},{"size":873,"mtime":1652600432382,"results":"23","hashOfConfig":"18"},{"size":3481,"mtime":1652606024259,"results":"24","hashOfConfig":"18"},{"size":2259,"mtime":1652600067829,"results":"25","hashOfConfig":"18"},{"size":510,"mtime":1652604801171,"results":"26","hashOfConfig":"27"},{"size":3326,"mtime":1652605908421,"results":"28","hashOfConfig":"27"},{"size":889,"mtime":1652621167456,"results":"29","hashOfConfig":"27"},{"size":595,"mtime":1652597867326,"results":"30","hashOfConfig":"27"},{"size":730,"mtime":1652594823182,"results":"31","hashOfConfig":"27"},{"size":1009,"mtime":1652620950140,"results":"32","hashOfConfig":"27"},{"size":2259,"mtime":1652600067829,"results":"33","hashOfConfig":"27"},{"size":4145,"mtime":1652620875454,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1b99c6y",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mau01e",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Blockchain\\test-react\\src\\index.js",[],["71","72"],"D:\\Blockchain\\test-react\\src\\App.js",["73"],"import React, { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport { create } from 'ipfs-http-client'\nimport MintLedger from './component/MintLedger'\nimport MintForm from './component/MintForm'\nimport MintFeedback from './component/MintFeedback'\nimport TokenMinter from \"./contracts/TokenMinter.json\"\nimport './App.css';\n\nfunction App () {\n  const [account, setAccount] = useState(\"\")\n  const [mintHistory, setMintHistory] = useState([])\n  const [mintResult, setMintResult] = useState(null)\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      //get user's metamask account\n      let w3 = new Web3(window.ethereum)\n      setWeb3(w3)\n      console.log(web3)\n      window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n        setAccount(accounts[0]);\n        console.log(account)\n      })\n    \n      window.ethereum.on('accountsChanged', (accounts) => {\n        setAccount(accounts[0]);\n      })\n    } else {\n      //connect to the default provider\n      let w3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n      setWeb3(w3)\n    }\n  },[])\n\n  useEffect(() => {\n    async function fetchMintHistory() {\n      const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n      const tokenMinterContract = await new web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n      return await tokenMinterContract.methods.getMintHistory().call();\n    }\n    if (web3 !== null) {\n      fetchMintHistory().then(res => {setMintHistory(res)})\n    }\n  },[mintResult, web3])\n\n  const uploadToIpfs = async (input) => {\n    ///create an instance of the client\n    const client = create('https://ipfs.infura.io:5001/api/v0')\n\n    //push the input to ipfs\n    const added = await client.add(input)\n    return added.path\n  }\n\n  const handleMintToken = async(owner, name) => {\n    const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n    //create connection to tokenMinterContract on the blockchain using the address and abi\n    const tokenMinterContract = await new web3.eth\n      .Contract(TokenMinter.abi, tokenMinterAddress)\n\n    let cid = await uploadToIpfs(name)\n\n    try {\n      //building the transaction to call mint() to the tokenMinter on blockchain\n      let txBuilder = await tokenMinterContract.methods.mint(owner, cid);\n      let encodedTx = await txBuilder.encodeABI();\n      let transactionObject = {\n        data: encodedTx,\n        from: window.ethereum.selectedAddress,\n        to: tokenMinterAddress\n      };\n\n      //call metamask to let users sign the transaction then send it\n      let txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionObject],\n      });\n\n      setMintResult({\n        txHash: txHash,\n        owner: owner,\n        cid: cid,\n        name: name\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        TokenMinter\n      </h1>\n      {account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\"?<MintForm onClick={handleMintToken}/>:<p>Only owner can access to mint function</p>}\n      {<MintFeedback result={mintResult}/>}\n      {<MintLedger mintHistory={mintHistory}/>}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Blockchain\\test-react\\src\\component\\MintLedger.js",[],"D:\\Blockchain\\test-react\\src\\component\\MintForm.js",[],"D:\\Blockchain\\test-react\\src\\component\\MintFeedback.js",[],"D:\\Blockchain\\test-react\\src\\token\\Token.js",["74","75"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport TokenInfo from \"./component/TokenInfo\";\r\nimport TransferTokenForm from \"./component/TransferTokenForm\";\r\nimport '../App.css';\r\n\r\nfunction Token() {\r\n    const [address, setAddress] = useState(\"\")\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    \r\n    useEffect(() => {\r\n        setAddress(searchParams.get(\"address\"))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Token\">\r\n            <h1>Token</h1>\r\n\r\n            <section style={{float:\"left\", width:\"40%\", margin:\"5%\"}}>\r\n                <TokenInfo address={address}/>\r\n            </section>\r\n\r\n            <section style={{float:\"right\", width:\"40%\", margin:\"5%\"}}>\r\n                <TransferTokenForm />\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Token","D:\\Blockchain\\test-react\\src\\token\\component\\TokenInfo.js",["76"],"import React, { useEffect, useState } from 'react'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\nimport Token from '../../contracts/Token.json'\r\n\r\nfunction TokenInfo(props) {\r\n    const [address, setAddress] = useState(null);\r\n    const [tokenInfo, setTokenInfo] = useState(null);\r\n    const [transferHistory, setTransferHistory] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(props.address)\r\n        setAddress(props.address)\r\n    }, [props.address])\r\n\r\n    useEffect(() => {\r\n        if (tokenInfo !== null) {\r\n            setTransferHistory([...tokenInfo.history].reverse().map((history) => {\r\n                let {time, owner} = history\r\n                time = new Date(time * 1000)\r\n                return (\r\n                <div>\r\n                    <hr></hr>\r\n                    <p>Time stamp: {time.toUTCString()}</p>\r\n                    <p>Owner:  {owner}</p>\r\n                    <hr></hr>\r\n                </div>\r\n                )\r\n            }))\r\n        }\r\n    }, [tokenInfo])\r\n\r\n    useEffect(() => {\r\n        const submitInfo = async() => {\r\n            handleOnClick()\r\n        }\r\n\r\n        if (address !== null && address !== \"\") {\r\n            submitInfo()\r\n        }\r\n    }, [address])\r\n\r\n    const handleAddressChange = (e) => {\r\n        setAddress(e.target.value);\r\n    }\r\n\r\n    const handleOnClick = async () => {\r\n        if (window.ethereum) {\r\n            console.log(\"address : \" + address)\r\n            let web3 = new Web3(window.ethereum);\r\n            var tokenContract = await new web3.eth.Contract(Token.abi, address)\r\n            var tokenOwner = await tokenContract.methods.getCurrentOwner().call()\r\n            var tokenCid = await tokenContract.methods.getNameCid().call()\r\n            var tokenName = await cidToData(tokenCid)\r\n            var ownershipHistory = await tokenContract.methods.getOwnerHistory().call()\r\n            setTokenInfo({\r\n                owner: tokenOwner,\r\n                cid: tokenCid,\r\n                name: tokenName,\r\n                history: ownershipHistory\r\n            })\r\n        }\r\n    }\r\n\r\n    const cidToData = async (cid) => {\r\n        //create an instance of client\r\n        const client = create('https://ipfs.infura.io:5001/api/v0')\r\n        const url = `https://ipfs.infura.io/ipfs/`.concat(cid)\r\n        console.log(url)\r\n    \r\n        //get all the data from client with cid\r\n        const datas = client.cat(cid)\r\n        var fetchData = ''\r\n    \r\n        for await (const data of datas) {\r\n            fetchData = fetchData.concat(String.fromCharCode.apply(String, data))\r\n        }\r\n    \r\n        return fetchData\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Get Token's Info</h1>\r\n            <div>\r\n                <p>Token's address: <input id=\"address\" type=\"text\" value={props.address} onChange={handleAddressChange}/></p>\r\n\t            <p><button id=\"submit_button\" type=\"button\" onClick={handleOnClick}>Submit</button></p>\r\n            </div>\r\n\r\n            {tokenInfo?(\r\n                <div>\r\n                    <h1>Basic Info:</h1>\r\n                    <hr></hr>\r\n                    <p> Token's owner: {tokenInfo.owner} </p>\r\n                    <p> Token's name: {tokenInfo.name} </p>\r\n                    <hr></hr>\r\n                </div>):<p>Currently loading token's info</p>}\r\n            {transferHistory?(<div><h1>Ownership history:</h1>{transferHistory}</div>):<></>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TokenInfo;","D:\\Blockchain\\test-react\\src\\token\\component\\TransferTokenForm.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\index.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\App.js",["77"],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\Token.js",["78","79"],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintFeedback.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintForm.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\component\\MintLedger.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\component\\TransferTokenForm.js",[],"D:\\git\\DemoSolidity\\TokenMinterDemoUsingReact\\src\\token\\component\\TokenInfo.js",["80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":35,"column":5,"nodeType":"87","endLine":35,"endColumn":7,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":9,"column":26,"nodeType":"91","messageId":"92","endLine":9,"endColumn":41},{"ruleId":"85","severity":1,"message":"93","line":13,"column":8,"nodeType":"87","endLine":13,"endColumn":10,"suggestions":"94"},{"ruleId":"85","severity":1,"message":"95","line":41,"column":8,"nodeType":"87","endLine":41,"endColumn":17,"suggestions":"96"},{"ruleId":"85","severity":1,"message":"86","line":35,"column":5,"nodeType":"87","endLine":35,"endColumn":7,"suggestions":"97"},{"ruleId":"89","severity":1,"message":"90","line":9,"column":26,"nodeType":"91","messageId":"92","endLine":9,"endColumn":41},{"ruleId":"85","severity":1,"message":"93","line":13,"column":8,"nodeType":"87","endLine":13,"endColumn":10,"suggestions":"98"},{"ruleId":"85","severity":1,"message":"95","line":46,"column":8,"nodeType":"87","endLine":46,"endColumn":17,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'account' and 'web3'. Either include them or remove the dependency array.","ArrayExpression",["102"],"no-unused-vars","'setSearchParams' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.",["103"],"React Hook useEffect has a missing dependency: 'handleOnClick'. Either include it or remove the dependency array.",["104"],["105"],["106"],["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"108","fix":"114"},{"desc":"110","fix":"115"},{"desc":"112","fix":"116"},"Update the dependencies array to be: [account, web3]",{"range":"117","text":"118"},"Update the dependencies array to be: [searchParams]",{"range":"119","text":"120"},"Update the dependencies array to be: [address, handleOnClick]",{"range":"121","text":"122"},{"range":"123","text":"118"},{"range":"124","text":"120"},{"range":"125","text":"122"},[1184,1186],"[account, web3]",[459,461],"[searchParams]",[1239,1248],"[address, handleOnClick]",[1184,1186],[459,461],[1530,1539]]