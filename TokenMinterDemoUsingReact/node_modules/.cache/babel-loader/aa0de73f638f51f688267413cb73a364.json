{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain\\\\test-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport MintLedger from './component/MintLedger';\nimport MintForm from './component/MintForm';\nimport TokenMinter from \"./contracts/TokenMinter.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // constructor(props) {\n  //   super(props);\n  //   console.log(this.props)\n  //   this.state = {\n  //     web3: null,\n  //     account: null,\n  //     tokenMinterContract: null,\n  //     minterLedger: [],\n  //     ownerTextFieldValue: null,\n  //     nameTextFieldValue: null\n  //   }\n  //   if (window.ethereum) {\n  //     //get user's metamask account\n  //     this.state.web3 = new Web3(window.ethereum);\n  //     window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //     window.ethereum.on('accountsChanged', (accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //   } else {\n  //     //connect to the default provider\n  //     this.state.web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n  //   }\n  //   const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8'\n  //   this.state.tokenMinterContract = new this.state.web3.eth\n  //     .Contract(TokenMinter.abi, tokenMinterAddress)\n  // }\n  // componentDidMount() {\n  //   this.state.tokenMinterContract.methods.getMintHistory().call()\n  //     .then(res => this.setState({ minterLedger: res }) )\n  // }\n  // mintToken = async() => {\n  //   let totalSupply = await this.state.tokenMinterContract.methods.getTotalSupply().call()\n  //   console.log(totalSupply)\n  // }\n  // handleOwnerTextFieldChange = (e) => {\n  //   this.setState({\n  //     ownerTextFieldValue: e.target.value\n  //   })\n  // }\n  // handleNameTextFieldChange = (e) => {\n  //   this.setState({\n  //     nameTextFieldValue: e.target.value\n  //   })\n  // }\n  // renderMinterDiv() {\n  //   if (this.state.account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\") {\n  //     return (\n  //       <div class=\"minterdiv\">\n  //         <p>Token's owner: <input id=\"owner\" type=\"text\" onChange={this.handleOwnerTextFieldChange}/></p>\n  //         <p>Token's name: <input id=\"name\" type=\"text\" onChange={this.handleNameTextFieldChange}/></p>\n  //         <p><button onClick={() => this.mintToken()}>Mint</button></p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return ;\n  //   }\n  // }\n  // renderMintLedger() {\n  //   return (\n  //     <MintLedger mintHistory={this.state.minterLedger}/>\n  //   );\n  // }\n  const [account, setAccount] = useState(\"\");\n  const [mintHistory, setMintHistory] = useState([]);\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      //get user's metamask account\n      let w3 = new Web3(window.ethereum);\n      setWeb3(w3);\n      console.log(web3);\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setAccount(accounts[0]);\n        console.log(account);\n      });\n      window.ethereum.on('accountsChanged', accounts => {\n        setAccount(accounts[0]);\n      });\n    } else {\n      //connect to the default provider\n      let w3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"));\n      setWeb3(w3);\n    }\n  }, []);\n  useEffect(() => {\n    async function fetchMintHistory() {\n      const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n      const tokenMinterContract = web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n      return await tokenMinterContract.methods.getMintHistory().call();\n    }\n\n    fetchMintHistory().then(res => {\n      setMintHistory(res);\n    });\n  }, [mintHistory]);\n\n  const handleMintToken = async (owner, name) => {\n    console.log(owner);\n    console.log(name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"TokenMinter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\" ? /*#__PURE__*/_jsxDEV(MintForm, {\n      onClick: handleMintToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 65\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Only owner can access to mint function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 103\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OQjU6hhCBFosQj4uj3i775lkVFY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Web3","MintLedger","MintForm","TokenMinter","App","account","setAccount","mintHistory","setMintHistory","web3","setWeb3","window","ethereum","w3","console","log","request","method","then","accounts","on","providers","HttpProvider","fetchMintHistory","tokenMinterAddress","tokenMinterContract","eth","Contract","abi","methods","getMintHistory","call","res","handleMintToken","owner","name"],"sources":["D:/Blockchain/test-react/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport MintLedger from './component/MintLedger'\nimport MintForm from './component/MintForm'\nimport TokenMinter from \"./contracts/TokenMinter.json\"\nimport './App.css';\n\nfunction App () {\n  // constructor(props) {\n  //   super(props);\n\n  //   console.log(this.props)\n    \n  //   this.state = {\n  //     web3: null,\n  //     account: null,\n  //     tokenMinterContract: null,\n  //     minterLedger: [],\n  //     ownerTextFieldValue: null,\n  //     nameTextFieldValue: null\n  //   }\n\n  //   if (window.ethereum) {\n  //     //get user's metamask account\n  //     this.state.web3 = new Web3(window.ethereum);\n  //     window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  \n  //     window.ethereum.on('accountsChanged', (accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //   } else {\n  //     //connect to the default provider\n  //     this.state.web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n  //   }\n\n  //   const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8'\n  //   this.state.tokenMinterContract = new this.state.web3.eth\n  //     .Contract(TokenMinter.abi, tokenMinterAddress)\n  // }\n\n  // componentDidMount() {\n  //   this.state.tokenMinterContract.methods.getMintHistory().call()\n  //     .then(res => this.setState({ minterLedger: res }) )\n  // }\n\n  // mintToken = async() => {\n  //   let totalSupply = await this.state.tokenMinterContract.methods.getTotalSupply().call()\n  //   console.log(totalSupply)\n  // }\n\n  // handleOwnerTextFieldChange = (e) => {\n  //   this.setState({\n  //     ownerTextFieldValue: e.target.value\n  //   })\n  // }\n\n  // handleNameTextFieldChange = (e) => {\n  //   this.setState({\n  //     nameTextFieldValue: e.target.value\n  //   })\n  // }\n\n  // renderMinterDiv() {\n  //   if (this.state.account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\") {\n  //     return (\n  //       <div class=\"minterdiv\">\n  //         <p>Token's owner: <input id=\"owner\" type=\"text\" onChange={this.handleOwnerTextFieldChange}/></p>\n  //         <p>Token's name: <input id=\"name\" type=\"text\" onChange={this.handleNameTextFieldChange}/></p>\n  //         <p><button onClick={() => this.mintToken()}>Mint</button></p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return ;\n  //   }\n  // }\n\n  // renderMintLedger() {\n  //   return (\n  //     <MintLedger mintHistory={this.state.minterLedger}/>\n  //   );\n  // }\n\n  const [account, setAccount] = useState(\"\")\n  const [mintHistory, setMintHistory] = useState([])\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      //get user's metamask account\n      let w3 = new Web3(window.ethereum)\n      setWeb3(w3)\n      console.log(web3)\n      window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n        setAccount(accounts[0]);\n        console.log(account)\n      })\n    \n      window.ethereum.on('accountsChanged', (accounts) => {\n        setAccount(accounts[0]);\n      })\n    } else {\n      //connect to the default provider\n      let w3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n      setWeb3(w3)\n    }\n  },[])\n\n  useEffect(() => {\n    async function fetchMintHistory() {\n      const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n      const tokenMinterContract = web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n      return await tokenMinterContract.methods.getMintHistory().call();\n    }\n    fetchMintHistory().then(res => {setMintHistory(res)})\n  },[mintHistory])\n\n  const handleMintToken = async(owner, name) => {\n    console.log(owner);\n    console.log(name)\n  }\n\n  return (\n    <div className=\"App\">\n      <p>\n        TokenMinter\n      </p>\n      {account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\"?<MintForm onClick={handleMintToken}/>:<p>Only owner can access to mint function</p>}\n      {/* {<MintLedger mintHistory={mintHistory}/>} */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}