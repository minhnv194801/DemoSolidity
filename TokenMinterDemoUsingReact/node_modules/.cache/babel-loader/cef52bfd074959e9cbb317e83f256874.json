{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain\\\\test-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport MintLedger from './component/MintLedger';\nimport MintForm from './component/MintForm';\nimport TokenMinter from \"./contracts/TokenMinter.json\";\nimport Token from \"./contracts/Token.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // constructor(props) {\n  //   super(props);\n  //   console.log(this.props)\n  //   this.state = {\n  //     web3: null,\n  //     account: null,\n  //     tokenMinterContract: null,\n  //     minterLedger: [],\n  //     ownerTextFieldValue: null,\n  //     nameTextFieldValue: null\n  //   }\n  //   if (window.ethereum) {\n  //     //get user's metamask account\n  //     this.state.web3 = new Web3(window.ethereum);\n  //     window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //     window.ethereum.on('accountsChanged', (accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //   } else {\n  //     //connect to the default provider\n  //     this.state.web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n  //   }\n  //   const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8'\n  //   this.state.tokenMinterContract = new this.state.web3.eth\n  //     .Contract(TokenMinter.abi, tokenMinterAddress)\n  // }\n  // componentDidMount() {\n  //   this.state.tokenMinterContract.methods.getMintHistory().call()\n  //     .then(res => this.setState({ minterLedger: res }) )\n  // }\n  // mintToken = async() => {\n  //   let totalSupply = await this.state.tokenMinterContract.methods.getTotalSupply().call()\n  //   console.log(totalSupply)\n  // }\n  // handleOwnerTextFieldChange = (e) => {\n  //   this.setState({\n  //     ownerTextFieldValue: e.target.value\n  //   })\n  // }\n  // handleNameTextFieldChange = (e) => {\n  //   this.setState({\n  //     nameTextFieldValue: e.target.value\n  //   })\n  // }\n  // renderMinterDiv() {\n  //   if (this.state.account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\") {\n  //     return (\n  //       <div class=\"minterdiv\">\n  //         <p>Token's owner: <input id=\"owner\" type=\"text\" onChange={this.handleOwnerTextFieldChange}/></p>\n  //         <p>Token's name: <input id=\"name\" type=\"text\" onChange={this.handleNameTextFieldChange}/></p>\n  //         <p><button onClick={() => this.mintToken()}>Mint</button></p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return ;\n  //   }\n  // }\n  // renderMintLedger() {\n  //   return (\n  //     <MintLedger mintHistory={this.state.minterLedger}/>\n  //   );\n  // }\n  const [account, setAccount] = useState(\"\");\n  const [mintHistory, setMintHistory] = useState([]);\n  const [mintResult, setMintResult] = useState({});\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      //get user's metamask account\n      let w3 = new Web3(window.ethereum);\n      setWeb3(w3);\n      console.log(web3);\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setAccount(accounts[0]);\n        console.log(account);\n      });\n      window.ethereum.on('accountsChanged', accounts => {\n        setAccount(accounts[0]);\n      });\n    } else {\n      //connect to the default provider\n      let w3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"));\n      setWeb3(w3);\n    }\n  }, []);\n  useEffect(() => {\n    async function fetchMintHistory() {\n      const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n      const tokenMinterContract = await new web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n      return await tokenMinterContract.methods.getMintHistory().call();\n    }\n\n    if (web3 !== null) {\n      fetchMintHistory().then(res => {\n        setMintHistory(res);\n      });\n      console.log(\"oh no\");\n    }\n  }, [mintResult, web3]);\n\n  const handleMintToken = async (owner, name) => {\n    const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8'; //create connection to tokenMinterContract on the blockchain using the address and abi\n\n    const tokenMinterContract = await new web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n\n    try {\n      //call the mint method of tokenMinter to get the new token's address\n      let tokenAddress = await tokenMinterContract.methods.mint(owner, name).call(); //building the transaction to call mint() to the tokenMinter on blockchain\n\n      let txBuilder = await tokenMinterContract.methods.mint(owner, name);\n      let encodedTx = await txBuilder.encodeABI();\n      let transactionObject = {\n        data: encodedTx,\n        from: window.ethereum.selectedAddress,\n        to: tokenMinterAddress\n      }; //call metamask to let users sign the transaction then send it\n\n      let txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionObject]\n      }); //create connection to the newly created token\n\n      const tokenContract = await new web3.eth.Contract(Token.abi, tokenAddress);\n      return {\n        'contract': tokenContract,\n        'transaction': txHash\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"TokenMinter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\" ? /*#__PURE__*/_jsxDEV(MintForm, {\n      onClick: handleMintToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 65\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Only owner can access to mint function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 103\n    }, this), /*#__PURE__*/_jsxDEV(MintLedger, {\n      mintHistory: mintHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"y2J24mxpPMZkWNawZuSqN3Yl334=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Web3","MintLedger","MintForm","TokenMinter","Token","App","account","setAccount","mintHistory","setMintHistory","mintResult","setMintResult","web3","setWeb3","window","ethereum","w3","console","log","request","method","then","accounts","on","providers","HttpProvider","fetchMintHistory","tokenMinterAddress","tokenMinterContract","eth","Contract","abi","methods","getMintHistory","call","res","handleMintToken","owner","name","tokenAddress","mint","txBuilder","encodedTx","encodeABI","transactionObject","data","from","selectedAddress","to","txHash","params","tokenContract","err"],"sources":["D:/Blockchain/test-react/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport MintLedger from './component/MintLedger'\nimport MintForm from './component/MintForm'\nimport TokenMinter from \"./contracts/TokenMinter.json\"\nimport Token from \"./contracts/Token.json\"\nimport './App.css';\n\nfunction App () {\n  // constructor(props) {\n  //   super(props);\n\n  //   console.log(this.props)\n    \n  //   this.state = {\n  //     web3: null,\n  //     account: null,\n  //     tokenMinterContract: null,\n  //     minterLedger: [],\n  //     ownerTextFieldValue: null,\n  //     nameTextFieldValue: null\n  //   }\n\n  //   if (window.ethereum) {\n  //     //get user's metamask account\n  //     this.state.web3 = new Web3(window.ethereum);\n  //     window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  \n  //     window.ethereum.on('accountsChanged', (accounts) => {\n  //       this.setState({\n  //         account: accounts[0]\n  //       })\n  //     })\n  //   } else {\n  //     //connect to the default provider\n  //     this.state.web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n  //   }\n\n  //   const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8'\n  //   this.state.tokenMinterContract = new this.state.web3.eth\n  //     .Contract(TokenMinter.abi, tokenMinterAddress)\n  // }\n\n  // componentDidMount() {\n  //   this.state.tokenMinterContract.methods.getMintHistory().call()\n  //     .then(res => this.setState({ minterLedger: res }) )\n  // }\n\n  // mintToken = async() => {\n  //   let totalSupply = await this.state.tokenMinterContract.methods.getTotalSupply().call()\n  //   console.log(totalSupply)\n  // }\n\n  // handleOwnerTextFieldChange = (e) => {\n  //   this.setState({\n  //     ownerTextFieldValue: e.target.value\n  //   })\n  // }\n\n  // handleNameTextFieldChange = (e) => {\n  //   this.setState({\n  //     nameTextFieldValue: e.target.value\n  //   })\n  // }\n\n  // renderMinterDiv() {\n  //   if (this.state.account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\") {\n  //     return (\n  //       <div class=\"minterdiv\">\n  //         <p>Token's owner: <input id=\"owner\" type=\"text\" onChange={this.handleOwnerTextFieldChange}/></p>\n  //         <p>Token's name: <input id=\"name\" type=\"text\" onChange={this.handleNameTextFieldChange}/></p>\n  //         <p><button onClick={() => this.mintToken()}>Mint</button></p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return ;\n  //   }\n  // }\n\n  // renderMintLedger() {\n  //   return (\n  //     <MintLedger mintHistory={this.state.minterLedger}/>\n  //   );\n  // }\n\n  const [account, setAccount] = useState(\"\")\n  const [mintHistory, setMintHistory] = useState([])\n  const [mintResult, setMintResult] = useState({})\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      //get user's metamask account\n      let w3 = new Web3(window.ethereum)\n      setWeb3(w3)\n      console.log(web3)\n      window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n        setAccount(accounts[0]);\n        console.log(account)\n      })\n    \n      window.ethereum.on('accountsChanged', (accounts) => {\n        setAccount(accounts[0]);\n      })\n    } else {\n      //connect to the default provider\n      let w3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9b11910966d3430e9846e504d5847593\"))\n      setWeb3(w3)\n    }\n  },[])\n\n  useEffect(() => {\n    async function fetchMintHistory() {\n      const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n      const tokenMinterContract = await new web3.eth.Contract(TokenMinter.abi, tokenMinterAddress);\n      return await tokenMinterContract.methods.getMintHistory().call();\n    }\n    if (web3 !== null) {\n      fetchMintHistory().then(res => {setMintHistory(res)})\n      console.log(\"oh no\")\n    }\n  },[mintResult, web3])\n\n  const handleMintToken = async(owner, name) => {\n    const tokenMinterAddress = '0x19A5A6878e66e5E12F04114ca5ef8e94919Ac9C8';\n    //create connection to tokenMinterContract on the blockchain using the address and abi\n    const tokenMinterContract = await new web3.eth\n      .Contract(TokenMinter.abi, tokenMinterAddress)\n\n    try {\n      //call the mint method of tokenMinter to get the new token's address\n      let tokenAddress = await tokenMinterContract.methods\n        .mint(owner, name)\n        .call()\n\n      //building the transaction to call mint() to the tokenMinter on blockchain\n      let txBuilder = await tokenMinterContract.methods.mint(owner, name);\n      let encodedTx = await txBuilder.encodeABI();\n      let transactionObject = {\n        data: encodedTx,\n        from: window.ethereum.selectedAddress,\n        to: tokenMinterAddress\n      };\n\n      //call metamask to let users sign the transaction then send it\n      let txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionObject],\n      });\n\n      //create connection to the newly created token\n      const tokenContract = await new web3.eth\n        .Contract(Token.abi, tokenAddress)\n\n      return {\n        'contract': tokenContract,\n        'transaction': txHash\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <p>\n        TokenMinter\n      </p>\n      {account === \"0xf61b13cd9b7e6cc7e3609f604232953ca8614bbc\"?<MintForm onClick={handleMintToken}/>:<p>Only owner can access to mint function</p>}\n      {<MintLedger mintHistory={mintHistory}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}