{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar _ = require(\"lodash\");\n\nexports.utils = {\n  convertHexToNumber: function (value) {\n    var valueBigNumber = new utils_1.BigNumber(value);\n    var valueNumber = valueBigNumber.toNumber();\n    return valueNumber;\n  },\n  convertHexToNumberOrNull: function (hex) {\n    if (hex === null) {\n      return null;\n    }\n\n    var decimal = exports.utils.convertHexToNumber(hex);\n    return decimal;\n  },\n  convertAmountToBigNumber: function (value) {\n    var num = value || 0;\n    var isBigNumber = utils_1.BigNumber.isBigNumber(num);\n\n    if (isBigNumber) {\n      return num;\n    }\n\n    if (_.isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n      return new utils_1.BigNumber(num.replace('0x', ''), 16);\n    }\n\n    var baseTen = 10;\n    return new utils_1.BigNumber(num.toString(baseTen), baseTen);\n  },\n  encodeAmountAsHexString: function (value) {\n    var valueBigNumber = exports.utils.convertAmountToBigNumber(value);\n    var hexBase = 16;\n    var valueHex = valueBigNumber.toString(hexBase);\n    return valueBigNumber.isLessThan(0) ? \"-0x\" + valueHex.substr(1) : \"0x\" + valueHex;\n  },\n  numberToHex: function (value) {\n    if (!isFinite(value) && !exports.utils.isHexStrict(value)) {\n      throw new Error(\"Given input \" + value + \" is not a number.\");\n    }\n\n    var valueBigNumber = new utils_1.BigNumber(value);\n    var hexBase = 16;\n    var result = valueBigNumber.toString(hexBase);\n    return valueBigNumber.lt(0) ? \"-0x\" + result.substr(1) : \"0x\" + result;\n  },\n  isHexStrict: function (hex) {\n    return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(_.isNumber(hex) ? hex.toString() : hex);\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEaA,gBAAQ;EACjBC,kBAAkB,EAAlB,UAAmBC,KAAnB,EAAgC;IAC5B,IAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAcF,KAAd,CAAvB;IACA,IAAMG,WAAW,GAAGF,cAAc,CAACG,QAAf,EAApB;IACA,OAAOD,WAAP;EACH,CALgB;EAMjBE,wBAAwB,EAAxB,UAAyBC,GAAzB,EAA2C;IACvC,IAAIA,GAAG,KAAK,IAAZ,EAAkB;MACd,OAAO,IAAP;IACH;;IACD,IAAMC,OAAO,GAAGT,cAAMC,kBAAN,CAAyBO,GAAzB,CAAhB;IACA,OAAOC,OAAP;EACH,CAZgB;EAajBC,wBAAwB,EAAxB,UAAyBR,KAAzB,EAA2D;IACvD,IAAMS,GAAG,GAAGT,KAAK,IAAI,CAArB;IACA,IAAMU,WAAW,GAAGR,kBAAUQ,WAAV,CAAsBD,GAAtB,CAApB;;IACA,IAAIC,WAAJ,EAAiB;MACb,OAAOD,GAAP;IACH;;IAED,IAAIE,CAAC,CAACC,QAAF,CAAWH,GAAX,MAAoBA,GAAG,CAACI,OAAJ,CAAY,IAAZ,MAAsB,CAAtB,IAA2BJ,GAAG,CAACI,OAAJ,CAAY,KAAZ,MAAuB,CAAtE,CAAJ,EAA8E;MAC1E,OAAO,IAAIX,iBAAJ,CAAcO,GAAG,CAACK,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqC,EAArC,CAAP;IACH;;IAED,IAAMC,OAAO,GAAG,EAAhB;IACA,OAAO,IAAIb,iBAAJ,CAAeO,GAAc,CAACO,QAAf,CAAwBD,OAAxB,CAAf,EAAiDA,OAAjD,CAAP;EACH,CA1BgB;EA2BjBE,uBAAuB,EAAvB,UAAwBjB,KAAxB,EAA0D;IACtD,IAAMC,cAAc,GAAGH,cAAMU,wBAAN,CAA+BR,KAA/B,CAAvB;IACA,IAAMkB,OAAO,GAAG,EAAhB;IACA,IAAMC,QAAQ,GAAGlB,cAAc,CAACe,QAAf,CAAwBE,OAAxB,CAAjB;IAEA,OAAOjB,cAAc,CAACmB,UAAf,CAA0B,CAA1B,IAA+B,QAAMD,QAAQ,CAACE,MAAT,CAAgB,CAAhB,CAArC,GAA4D,OAAKF,QAAxE;EACH,CAjCgB;EAkCjBG,WAAW,EAAX,UAAYtB,KAAZ,EAAyB;IACrB,IAAI,CAACuB,QAAQ,CAACvB,KAAD,CAAT,IAAoB,CAACF,cAAM0B,WAAN,CAAkBxB,KAAlB,CAAzB,EAAmD;MAC/C,MAAM,IAAIyB,KAAJ,CAAU,iBAAezB,KAAf,GAAoB,mBAA9B,CAAN;IACH;;IAED,IAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAcF,KAAd,CAAvB;IACA,IAAMkB,OAAO,GAAG,EAAhB;IACA,IAAMQ,MAAM,GAAGzB,cAAc,CAACe,QAAf,CAAwBE,OAAxB,CAAf;IAEA,OAAOjB,cAAc,CAAC0B,EAAf,CAAkB,CAAlB,IAAuB,QAAMD,MAAM,CAACL,MAAP,CAAc,CAAd,CAA7B,GAAkD,OAAKK,MAA9D;EACH,CA5CgB;EA6CjBF,WAAW,EAAX,UAAYlB,GAAZ,EAAgC;IAC5B,OACI,CAACK,CAAC,CAACC,QAAF,CAAWN,GAAX,KAAmBK,CAAC,CAACiB,QAAF,CAAWtB,GAAX,CAApB,KAAwC,qBAAqBuB,IAArB,CAA0BlB,CAAC,CAACiB,QAAF,CAAWtB,GAAX,IAAkBA,GAAG,CAACU,QAAJ,EAAlB,GAAmCV,GAA7D,CAD5C;EAGH;AAjDgB,CAAR","names":["exports","convertHexToNumber","value","valueBigNumber","utils_1","valueNumber","toNumber","convertHexToNumberOrNull","hex","decimal","convertAmountToBigNumber","num","isBigNumber","_","isString","indexOf","replace","baseTen","toString","encodeAmountAsHexString","hexBase","valueHex","isLessThan","substr","numberToHex","isFinite","isHexStrict","Error","result","lt","isNumber","test"],"sources":["../../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}