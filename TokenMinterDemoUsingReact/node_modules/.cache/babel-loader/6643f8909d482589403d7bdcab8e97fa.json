{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethers = require(\"ethers\");\n\nvar _ = require(\"lodash\");\n\nvar _1 = require(\".\");\n\nvar address_utils_1 = require(\"./address_utils\");\n\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\n/**\n * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event\n * signature from the ABI and attempts to decode the logs using it.\n */\n\n\nvar AbiDecoder =\n/** @class */\nfunction () {\n  /**\n   * Instantiate an AbiDecoder\n   * @param abiArrays An array of contract ABI's\n   * @return AbiDecoder instance\n   */\n  function AbiDecoder(abiArrays) {\n    var _this = this;\n\n    this._eventIds = {};\n    this._selectorToFunctionInfo = {};\n\n    _.each(abiArrays, function (abi) {\n      _this.addABI(abi);\n    });\n  }\n  /**\n   * Retrieves the function selector from calldata.\n   * @param calldata hex-encoded calldata.\n   * @return hex-encoded function selector.\n   */\n\n\n  AbiDecoder._getFunctionSelector = function (calldata) {\n    var functionSelectorLength = 10;\n\n    if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) {\n      throw new Error(\"Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '\" + calldata + \"'\");\n    }\n\n    var functionSelector = calldata.substr(0, functionSelectorLength);\n    return functionSelector;\n  };\n  /**\n   * Attempt to decode a log given the ABI's the AbiDecoder knows about.\n   * @param log The log to attempt to decode\n   * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.\n   */\n\n\n  AbiDecoder.prototype.tryToDecodeLogOrNoop = function (log) {\n    var eventId = log.topics[0];\n    var numIndexedArgs = log.topics.length - 1;\n\n    if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) {\n      return log;\n    }\n\n    var event = this._eventIds[eventId][numIndexedArgs];\n    var ethersInterface = new ethers.utils.Interface([event]);\n    var decodedParams = {};\n    var topicsIndex = 1;\n    var decodedData;\n\n    try {\n      decodedData = ethersInterface.events[event.name].decode(log.data);\n    } catch (error) {\n      if (error.code === ethers.errors.INVALID_ARGUMENT) {\n        // Because we index events by Method ID, and Method IDs are derived from the method\n        // name and the input parameters, it's possible that the return value of the event\n        // does not match our ABI. If that's the case, then ethers will throw an error\n        // when we try to parse the event. We handle that case here by returning the log rather\n        // than throwing an error.\n        return log;\n      }\n\n      throw error;\n    }\n\n    var didFailToDecode = false;\n\n    _.forEach(event.inputs, function (param, i) {\n      // Indexed parameters are stored in topics. Non-indexed ones in decodedData\n      var value = param.indexed ? log.topics[topicsIndex++] : decodedData[i];\n\n      if (value === undefined) {\n        didFailToDecode = true;\n        return;\n      }\n\n      if (param.type === ethereum_types_1.SolidityTypes.Address) {\n        var baseHex = 16;\n        value = address_utils_1.addressUtils.padZeros(new configured_bignumber_1.BigNumber(value.toLowerCase()).toString(baseHex));\n      } else if (param.type === ethereum_types_1.SolidityTypes.Uint256 || param.type === ethereum_types_1.SolidityTypes.Uint) {\n        value = new configured_bignumber_1.BigNumber(value);\n      } else if (param.type === ethereum_types_1.SolidityTypes.Uint8) {\n        value = new configured_bignumber_1.BigNumber(value).toNumber();\n      }\n\n      decodedParams[param.name] = value;\n    });\n\n    if (didFailToDecode) {\n      return log;\n    } else {\n      return __assign({}, log, {\n        event: event.name,\n        args: decodedParams\n      });\n    }\n  };\n  /**\n   * Decodes calldata for a known ABI.\n   * @param calldata hex-encoded calldata.\n   * @param contractName used to disambiguate similar ABI's (optional).\n   * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.\n   */\n\n\n  AbiDecoder.prototype.decodeCalldataOrThrow = function (calldata, contractName) {\n    var functionSelector = AbiDecoder._getFunctionSelector(calldata);\n\n    var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];\n\n    if (candidateFunctionInfos === undefined) {\n      throw new Error(\"No functions registered for selector '\" + functionSelector + \"'\");\n    }\n\n    var functionInfo = _.find(candidateFunctionInfos, function (candidateFunctionInfo) {\n      return contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName);\n    });\n\n    if (functionInfo === undefined) {\n      throw new Error(\"No function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n    } else if (functionInfo.abiEncoder === undefined) {\n      throw new Error(\"Function ABI Encoder is not defined, for function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n    }\n\n    var functionName = functionInfo.abiEncoder.getDataItem().name;\n    var functionSignature = functionInfo.abiEncoder.getSignatureType();\n    var functionArguments = functionInfo.abiEncoder.decode(calldata);\n    var decodedCalldata = {\n      functionName: functionName,\n      functionSignature: functionSignature,\n      functionArguments: functionArguments\n    };\n    return decodedCalldata;\n  };\n  /**\n   * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.\n   * Additional properties can be included to disambiguate similar ABI's. For example, if two functions\n   * have the same signature but different parameter names, then their ABI definitions can be disambiguated\n   * by specifying a contract name.\n   * @param abiDefinitions ABI definitions for a given contract.\n   * @param contractName Name of contract that encapsulates the ABI definitions (optional).\n   *                     This can be used when decoding calldata to disambiguate methods with\n   *                     the same signature but different parameter names.\n   */\n\n\n  AbiDecoder.prototype.addABI = function (abiArray, contractName) {\n    var _this = this;\n\n    if (abiArray === undefined) {\n      return;\n    }\n\n    var ethersInterface = new ethers.utils.Interface(abiArray);\n\n    _.map(abiArray, function (abi) {\n      switch (abi.type) {\n        case ethereum_types_1.AbiType.Event:\n          // tslint:disable-next-line:no-unnecessary-type-assertion\n          _this._addEventABI(abi, ethersInterface);\n\n          break;\n\n        case ethereum_types_1.AbiType.Function:\n          // tslint:disable-next-line:no-unnecessary-type-assertion\n          _this._addMethodABI(abi, contractName);\n\n          break;\n\n        default:\n          // ignore other types\n          break;\n      }\n    });\n  };\n\n  AbiDecoder.prototype._addEventABI = function (eventAbi, ethersInterface) {\n    var _a;\n\n    var topic = ethersInterface.events[eventAbi.name].topic;\n\n    var numIndexedArgs = _.reduce(eventAbi.inputs, function (sum, input) {\n      return input.indexed ? sum + 1 : sum;\n    }, 0);\n\n    this._eventIds[topic] = __assign({}, this._eventIds[topic], (_a = {}, _a[numIndexedArgs] = eventAbi, _a));\n  };\n\n  AbiDecoder.prototype._addMethodABI = function (methodAbi, contractName) {\n    var abiEncoder = new _1.AbiEncoder.Method(methodAbi);\n    var functionSelector = abiEncoder.getSelector();\n\n    if (!(functionSelector in this._selectorToFunctionInfo)) {\n      this._selectorToFunctionInfo[functionSelector] = [];\n    } // Recored a copy of this ABI for each deployment\n\n\n    var functionSignature = abiEncoder.getSignature();\n\n    this._selectorToFunctionInfo[functionSelector].push({\n      functionSignature: functionSignature,\n      abiEncoder: abiEncoder,\n      contractName: contractName\n    });\n  };\n\n  return AbiDecoder;\n}();\n\nexports.AbiDecoder = AbiDecoder;","map":{"version":3,"sources":["../../src/abi_decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethers = require(\"ethers\");\nvar _ = require(\"lodash\");\nvar _1 = require(\".\");\nvar address_utils_1 = require(\"./address_utils\");\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\n/**\n * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event\n * signature from the ABI and attempts to decode the logs using it.\n */\nvar AbiDecoder = /** @class */ (function () {\n    /**\n     * Instantiate an AbiDecoder\n     * @param abiArrays An array of contract ABI's\n     * @return AbiDecoder instance\n     */\n    function AbiDecoder(abiArrays) {\n        var _this = this;\n        this._eventIds = {};\n        this._selectorToFunctionInfo = {};\n        _.each(abiArrays, function (abi) {\n            _this.addABI(abi);\n        });\n    }\n    /**\n     * Retrieves the function selector from calldata.\n     * @param calldata hex-encoded calldata.\n     * @return hex-encoded function selector.\n     */\n    AbiDecoder._getFunctionSelector = function (calldata) {\n        var functionSelectorLength = 10;\n        if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) {\n            throw new Error(\"Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '\" + calldata + \"'\");\n        }\n        var functionSelector = calldata.substr(0, functionSelectorLength);\n        return functionSelector;\n    };\n    /**\n     * Attempt to decode a log given the ABI's the AbiDecoder knows about.\n     * @param log The log to attempt to decode\n     * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.\n     */\n    AbiDecoder.prototype.tryToDecodeLogOrNoop = function (log) {\n        var eventId = log.topics[0];\n        var numIndexedArgs = log.topics.length - 1;\n        if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) {\n            return log;\n        }\n        var event = this._eventIds[eventId][numIndexedArgs];\n        var ethersInterface = new ethers.utils.Interface([event]);\n        var decodedParams = {};\n        var topicsIndex = 1;\n        var decodedData;\n        try {\n            decodedData = ethersInterface.events[event.name].decode(log.data);\n        }\n        catch (error) {\n            if (error.code === ethers.errors.INVALID_ARGUMENT) {\n                // Because we index events by Method ID, and Method IDs are derived from the method\n                // name and the input parameters, it's possible that the return value of the event\n                // does not match our ABI. If that's the case, then ethers will throw an error\n                // when we try to parse the event. We handle that case here by returning the log rather\n                // than throwing an error.\n                return log;\n            }\n            throw error;\n        }\n        var didFailToDecode = false;\n        _.forEach(event.inputs, function (param, i) {\n            // Indexed parameters are stored in topics. Non-indexed ones in decodedData\n            var value = param.indexed ? log.topics[topicsIndex++] : decodedData[i];\n            if (value === undefined) {\n                didFailToDecode = true;\n                return;\n            }\n            if (param.type === ethereum_types_1.SolidityTypes.Address) {\n                var baseHex = 16;\n                value = address_utils_1.addressUtils.padZeros(new configured_bignumber_1.BigNumber(value.toLowerCase()).toString(baseHex));\n            }\n            else if (param.type === ethereum_types_1.SolidityTypes.Uint256 || param.type === ethereum_types_1.SolidityTypes.Uint) {\n                value = new configured_bignumber_1.BigNumber(value);\n            }\n            else if (param.type === ethereum_types_1.SolidityTypes.Uint8) {\n                value = new configured_bignumber_1.BigNumber(value).toNumber();\n            }\n            decodedParams[param.name] = value;\n        });\n        if (didFailToDecode) {\n            return log;\n        }\n        else {\n            return __assign({}, log, { event: event.name, args: decodedParams });\n        }\n    };\n    /**\n     * Decodes calldata for a known ABI.\n     * @param calldata hex-encoded calldata.\n     * @param contractName used to disambiguate similar ABI's (optional).\n     * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.\n     */\n    AbiDecoder.prototype.decodeCalldataOrThrow = function (calldata, contractName) {\n        var functionSelector = AbiDecoder._getFunctionSelector(calldata);\n        var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];\n        if (candidateFunctionInfos === undefined) {\n            throw new Error(\"No functions registered for selector '\" + functionSelector + \"'\");\n        }\n        var functionInfo = _.find(candidateFunctionInfos, function (candidateFunctionInfo) {\n            return (contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName));\n        });\n        if (functionInfo === undefined) {\n            throw new Error(\"No function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n        }\n        else if (functionInfo.abiEncoder === undefined) {\n            throw new Error(\"Function ABI Encoder is not defined, for function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n        }\n        var functionName = functionInfo.abiEncoder.getDataItem().name;\n        var functionSignature = functionInfo.abiEncoder.getSignatureType();\n        var functionArguments = functionInfo.abiEncoder.decode(calldata);\n        var decodedCalldata = {\n            functionName: functionName,\n            functionSignature: functionSignature,\n            functionArguments: functionArguments,\n        };\n        return decodedCalldata;\n    };\n    /**\n     * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.\n     * Additional properties can be included to disambiguate similar ABI's. For example, if two functions\n     * have the same signature but different parameter names, then their ABI definitions can be disambiguated\n     * by specifying a contract name.\n     * @param abiDefinitions ABI definitions for a given contract.\n     * @param contractName Name of contract that encapsulates the ABI definitions (optional).\n     *                     This can be used when decoding calldata to disambiguate methods with\n     *                     the same signature but different parameter names.\n     */\n    AbiDecoder.prototype.addABI = function (abiArray, contractName) {\n        var _this = this;\n        if (abiArray === undefined) {\n            return;\n        }\n        var ethersInterface = new ethers.utils.Interface(abiArray);\n        _.map(abiArray, function (abi) {\n            switch (abi.type) {\n                case ethereum_types_1.AbiType.Event:\n                    // tslint:disable-next-line:no-unnecessary-type-assertion\n                    _this._addEventABI(abi, ethersInterface);\n                    break;\n                case ethereum_types_1.AbiType.Function:\n                    // tslint:disable-next-line:no-unnecessary-type-assertion\n                    _this._addMethodABI(abi, contractName);\n                    break;\n                default:\n                    // ignore other types\n                    break;\n            }\n        });\n    };\n    AbiDecoder.prototype._addEventABI = function (eventAbi, ethersInterface) {\n        var _a;\n        var topic = ethersInterface.events[eventAbi.name].topic;\n        var numIndexedArgs = _.reduce(eventAbi.inputs, function (sum, input) { return (input.indexed ? sum + 1 : sum); }, 0);\n        this._eventIds[topic] = __assign({}, this._eventIds[topic], (_a = {}, _a[numIndexedArgs] = eventAbi, _a));\n    };\n    AbiDecoder.prototype._addMethodABI = function (methodAbi, contractName) {\n        var abiEncoder = new _1.AbiEncoder.Method(methodAbi);\n        var functionSelector = abiEncoder.getSelector();\n        if (!(functionSelector in this._selectorToFunctionInfo)) {\n            this._selectorToFunctionInfo[functionSelector] = [];\n        }\n        // Recored a copy of this ABI for each deployment\n        var functionSignature = abiEncoder.getSignature();\n        this._selectorToFunctionInfo[functionSelector].push({\n            functionSignature: functionSignature,\n            abiEncoder: abiEncoder,\n            contractName: contractName,\n        });\n    };\n    return AbiDecoder;\n}());\nexports.AbiDecoder = AbiDecoder;\n//# sourceMappingURL=abi_decoder.js.map"]},"metadata":{},"sourceType":"script"}