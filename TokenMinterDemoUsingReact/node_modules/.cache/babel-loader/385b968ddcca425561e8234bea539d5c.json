{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_schemas_1 = require(\"@0x/json-schemas\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar _ = require(\"lodash\");\n\nvar validUrl = require(\"valid-url\");\n\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n  isBigNumber: function (variableName, value) {\n    var isBigNumber = utils_1.BigNumber.isBigNumber(value);\n    exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));\n  },\n  isValidBaseUnitAmount: function (variableName, value) {\n    exports.assert.isBigNumber(variableName, value);\n    var isNegative = value.isLessThan(0);\n    exports.assert.assert(!isNegative, variableName + \" cannot be a negative number, found value: \" + value.toNumber());\n    var hasDecimals = value.decimalPlaces() !== 0;\n    exports.assert.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n  },\n  isString: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n  },\n  isFunction: function (variableName, value) {\n    exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));\n  },\n  isHexString: function (variableName, value) {\n    exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));\n  },\n  isETHAddressHex: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n    exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n  },\n  doesBelongToStringEnum: function (variableName, value, stringEnum\n  /* There is no base type for every string enum */\n  ) {\n    var enumValues = _.values(stringEnum);\n\n    var doesBelongToStringEnum = _.includes(enumValues, value);\n\n    var enumValuesAsStrings = _.map(enumValues, function (enumValue) {\n      return \"'\" + enumValue + \"'\";\n    });\n\n    var enumValuesAsString = enumValuesAsStrings.join(', ');\n    exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n  },\n  hasAtMostOneUniqueValue: function (value, errMsg) {\n    exports.assert.assert(_.uniq(value).length <= 1, errMsg);\n  },\n  isNumber: function (variableName, value) {\n    exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));\n  },\n  isNumberOrBigNumber: function (variableName, value) {\n    if (_.isFinite(value)) {\n      return;\n    } else {\n      exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));\n    }\n  },\n  isBoolean: function (variableName, value) {\n    exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));\n  },\n  isWeb3Provider: function (variableName, value) {\n    utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');\n\n    var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n\n    exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));\n  },\n  doesConformToSchema: function (variableName, value, schema, subSchemas) {\n    if (value === undefined) {\n      throw new Error(variableName + \" can't be undefined\");\n    }\n\n    var schemaValidator = new json_schemas_1.SchemaValidator();\n\n    if (subSchemas !== undefined) {\n      _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));\n    }\n\n    var validationResult = schemaValidator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n    var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n    exports.assert.assert(!hasValidationErrors, msg);\n  },\n  isWebUri: function (variableName, value) {\n    var isValidUrl = validUrl.isWebUri(value) !== undefined;\n    exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));\n  },\n  isUri: function (variableName, value) {\n    var isValidUri = validUrl.isUri(value) !== undefined;\n    exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));\n  },\n  isBlockParam: function (variableName, value) {\n    if (Number.isInteger(value) && value >= 0) {\n      return;\n    }\n\n    if (value === 'earliest' || value === 'latest' || value === 'pending') {\n      return;\n    }\n\n    throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));\n  },\n  isArray: function (variableName, value) {\n    if (!Array.isArray(value)) {\n      throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));\n    }\n  },\n  assert: function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  },\n  typeAssertionMessage: function (variableName, type, value) {\n    return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n  }\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_schemas_1 = require(\"@0x/json-schemas\");\nvar utils_1 = require(\"@0x/utils\");\nvar _ = require(\"lodash\");\nvar validUrl = require(\"valid-url\");\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n    isBigNumber: function (variableName, value) {\n        var isBigNumber = utils_1.BigNumber.isBigNumber(value);\n        exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));\n    },\n    isValidBaseUnitAmount: function (variableName, value) {\n        exports.assert.isBigNumber(variableName, value);\n        var isNegative = value.isLessThan(0);\n        exports.assert.assert(!isNegative, variableName + \" cannot be a negative number, found value: \" + value.toNumber());\n        var hasDecimals = value.decimalPlaces() !== 0;\n        exports.assert.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n    },\n    isString: function (variableName, value) {\n        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n    },\n    isFunction: function (variableName, value) {\n        exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));\n    },\n    isHexString: function (variableName, value) {\n        exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));\n    },\n    isETHAddressHex: function (variableName, value) {\n        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n        exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n    },\n    doesBelongToStringEnum: function (variableName, value, stringEnum /* There is no base type for every string enum */) {\n        var enumValues = _.values(stringEnum);\n        var doesBelongToStringEnum = _.includes(enumValues, value);\n        var enumValuesAsStrings = _.map(enumValues, function (enumValue) { return \"'\" + enumValue + \"'\"; });\n        var enumValuesAsString = enumValuesAsStrings.join(', ');\n        exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n    },\n    hasAtMostOneUniqueValue: function (value, errMsg) {\n        exports.assert.assert(_.uniq(value).length <= 1, errMsg);\n    },\n    isNumber: function (variableName, value) {\n        exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));\n    },\n    isNumberOrBigNumber: function (variableName, value) {\n        if (_.isFinite(value)) {\n            return;\n        }\n        else {\n            exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));\n        }\n    },\n    isBoolean: function (variableName, value) {\n        exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));\n    },\n    isWeb3Provider: function (variableName, value) {\n        utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');\n        var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n        exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));\n    },\n    doesConformToSchema: function (variableName, value, schema, subSchemas) {\n        if (value === undefined) {\n            throw new Error(variableName + \" can't be undefined\");\n        }\n        var schemaValidator = new json_schemas_1.SchemaValidator();\n        if (subSchemas !== undefined) {\n            _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));\n        }\n        var validationResult = schemaValidator.validate(value, schema);\n        var hasValidationErrors = validationResult.errors.length > 0;\n        var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n        exports.assert.assert(!hasValidationErrors, msg);\n    },\n    isWebUri: function (variableName, value) {\n        var isValidUrl = validUrl.isWebUri(value) !== undefined;\n        exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));\n    },\n    isUri: function (variableName, value) {\n        var isValidUri = validUrl.isUri(value) !== undefined;\n        exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));\n    },\n    isBlockParam: function (variableName, value) {\n        if (Number.isInteger(value) && value >= 0) {\n            return;\n        }\n        if (value === 'earliest' || value === 'latest' || value === 'pending') {\n            return;\n        }\n        throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));\n    },\n    isArray: function (variableName, value) {\n        if (!Array.isArray(value)) {\n            throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));\n        }\n    },\n    assert: function (condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    },\n    typeAssertionMessage: function (variableName, type, value) {\n        return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n    },\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}