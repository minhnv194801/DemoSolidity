{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\n\n\nexports.marshaller = {\n  /**\n   * Unmarshall block without transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block without transaction data\n   */\n  unmarshalIntoBlockWithoutTransactionData: function (blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)\n    });\n\n    return block;\n  },\n\n  /**\n   * Unmarshall block with transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block with transaction data\n   */\n  unmarshalIntoBlockWithTransactionData: function (blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),\n      transactions: []\n    });\n\n    block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n      var transaction = exports.marshaller.unmarshalTransaction(tx);\n      return transaction;\n    });\n    return block;\n  },\n\n  /**\n   * Unmarshall transaction\n   * @param txRpc transaction to unmarshall\n   * @return unmarshalled transaction\n   */\n  unmarshalTransaction: function (txRpc) {\n    var tx = __assign({}, txRpc, {\n      blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,\n      transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,\n      nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),\n      gas: utils_2.utils.convertHexToNumber(txRpc.gas),\n      gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice),\n      value: utils_2.utils.convertAmountToBigNumber(txRpc.value)\n    });\n\n    return tx;\n  },\n\n  /**\n   * Unmarshall transaction receipt\n   * @param txReceiptRpc transaction receipt to unmarshall\n   * @return unmarshalled transaction receipt\n   */\n  unmarshalTransactionReceipt: function (txReceiptRpc) {\n    var txReceipt = __assign({}, txReceiptRpc, {\n      blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),\n      cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),\n      gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),\n      logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))\n    });\n\n    return txReceipt;\n  },\n\n  /**\n   * Unmarshall transaction data\n   * @param txDataRpc transaction data to unmarshall\n   * @return unmarshalled transaction data\n   */\n  unmarshalTxData: function (txDataRpc) {\n    if (txDataRpc.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var txData = __assign({}, txDataRpc, {\n      value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n      gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n      gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n      nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined\n    });\n\n    return txData;\n  },\n\n  /**\n   * Marshall transaction data\n   * @param txData transaction data to marshall\n   * @return marshalled transaction data\n   */\n  marshalTxData: function (txData) {\n    if (txData.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var callTxDataBase = __assign({}, txData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var txDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: exports.marshaller.marshalAddress(txData.from)\n    });\n\n    var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n\n    _.each(txDataRPC, function (value, key) {\n      if (value === undefined && _.includes(prunableIfUndefined, key)) {\n        delete txDataRPC[key];\n      }\n    });\n\n    return txDataRPC;\n  },\n\n  /**\n   * Marshall call data\n   * @param callData call data to marshall\n   * @return marshalled call data\n   */\n  marshalCallData: function (callData) {\n    var callTxDataBase = __assign({}, callData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var callDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)\n    });\n\n    return callDataRPC;\n  },\n\n  /**\n   * Marshall address\n   * @param address address to marshall\n   * @return marshalled address\n   */\n  marshalAddress: function (address) {\n    if (utils_1.addressUtils.isAddress(address)) {\n      return ethUtil.addHexPrefix(address);\n    }\n\n    throw new Error(\"Invalid address encountered: \" + address);\n  },\n\n  /**\n   * Marshall block param\n   * @param blockParam block param to marshall\n   * @return marshalled block param\n   */\n  marshalBlockParam: function (blockParam) {\n    if (blockParam === undefined) {\n      return ethereum_types_1.BlockParamLiteral.Latest;\n    }\n\n    var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n    return encodedBlockParam;\n  },\n\n  /**\n   * Unmarshall log\n   * @param rawLog log to unmarshall\n   * @return unmarshalled log\n   */\n  unmarshalLog: function (rawLog) {\n    var formattedLog = __assign({}, rawLog, {\n      logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),\n      blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)\n    });\n\n    return formattedLog;\n  },\n  _marshalCallTxDataBase: function (callTxDataBase) {\n    var callTxDataBaseRPC = __assign({}, callTxDataBase, {\n      to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n      gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n      gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n      value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n      nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce)\n    });\n\n    return callTxDataBaseRPC;\n  }\n};","map":{"version":3,"mappings":"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","names":["exports","unmarshalIntoBlockWithoutTransactionData","blockWithHexValues","block","gasLimit","utils_2","convertHexToNumber","gasUsed","size","timestamp","number","difficulty","convertAmountToBigNumber","totalDifficulty","unmarshalIntoBlockWithTransactionData","transactions","_","map","tx","transaction","unmarshalTransaction","txRpc","blockNumber","transactionIndex","nonce","gas","gasPrice","value","unmarshalTransactionReceipt","txReceiptRpc","txReceipt","cumulativeGasUsed","logs","unmarshalLog","bind","unmarshalTxData","txDataRpc","from","undefined","Error","txData","marshalTxData","callTxDataBase","callTxDataBaseRPC","_marshalCallTxDataBase","txDataRPC","marshalAddress","prunableIfUndefined","each","key","includes","marshalCallData","callData","callDataRPC","address","utils_1","isAddress","ethUtil","addHexPrefix","marshalBlockParam","blockParam","ethereum_types_1","Latest","encodedBlockParam","isNumber","numberToHex","rawLog","formattedLog","logIndex","convertHexToNumberOrNull","to","encodeAmountAsHexString"],"sources":["../../src/marshaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}