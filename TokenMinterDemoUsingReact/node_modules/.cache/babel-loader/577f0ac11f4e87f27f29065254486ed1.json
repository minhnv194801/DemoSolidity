{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_schemas_1 = require(\"@0x/json-schemas\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar _ = require(\"lodash\");\n\nvar validUrl = require(\"valid-url\");\n\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n  isBigNumber: function (variableName, value) {\n    var isBigNumber = utils_1.BigNumber.isBigNumber(value);\n    exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));\n  },\n  isValidBaseUnitAmount: function (variableName, value) {\n    exports.assert.isBigNumber(variableName, value);\n    var isNegative = value.isLessThan(0);\n    exports.assert.assert(!isNegative, variableName + \" cannot be a negative number, found value: \" + value.toNumber());\n    var hasDecimals = value.decimalPlaces() !== 0;\n    exports.assert.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n  },\n  isString: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n  },\n  isFunction: function (variableName, value) {\n    exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));\n  },\n  isHexString: function (variableName, value) {\n    exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));\n  },\n  isETHAddressHex: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n    exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n  },\n  doesBelongToStringEnum: function (variableName, value, stringEnum\n  /* There is no base type for every string enum */\n  ) {\n    var enumValues = _.values(stringEnum);\n\n    var doesBelongToStringEnum = _.includes(enumValues, value);\n\n    var enumValuesAsStrings = _.map(enumValues, function (enumValue) {\n      return \"'\" + enumValue + \"'\";\n    });\n\n    var enumValuesAsString = enumValuesAsStrings.join(', ');\n    exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n  },\n  hasAtMostOneUniqueValue: function (value, errMsg) {\n    exports.assert.assert(_.uniq(value).length <= 1, errMsg);\n  },\n  isNumber: function (variableName, value) {\n    exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));\n  },\n  isNumberOrBigNumber: function (variableName, value) {\n    if (_.isFinite(value)) {\n      return;\n    } else {\n      exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));\n    }\n  },\n  isBoolean: function (variableName, value) {\n    exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));\n  },\n  isWeb3Provider: function (variableName, value) {\n    utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');\n\n    var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n\n    exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));\n  },\n  doesConformToSchema: function (variableName, value, schema, subSchemas) {\n    if (value === undefined) {\n      throw new Error(variableName + \" can't be undefined\");\n    }\n\n    var schemaValidator = new json_schemas_1.SchemaValidator();\n\n    if (subSchemas !== undefined) {\n      _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));\n    }\n\n    var validationResult = schemaValidator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n    var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n    exports.assert.assert(!hasValidationErrors, msg);\n  },\n  isWebUri: function (variableName, value) {\n    var isValidUrl = validUrl.isWebUri(value) !== undefined;\n    exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));\n  },\n  isUri: function (variableName, value) {\n    var isValidUri = validUrl.isUri(value) !== undefined;\n    exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));\n  },\n  isBlockParam: function (variableName, value) {\n    if (Number.isInteger(value) && value >= 0) {\n      return;\n    }\n\n    if (value === 'earliest' || value === 'latest' || value === 'pending') {\n      return;\n    }\n\n    throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));\n  },\n  isArray: function (variableName, value) {\n    if (!Array.isArray(value)) {\n      throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));\n    }\n  },\n  assert: function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  },\n  typeAssertionMessage: function (variableName, type, value) {\n    return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n  }\n};","map":{"version":3,"mappings":"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","names":["HEX_REGEX","exports","isBigNumber","variableName","value","utils_1","assert","typeAssertionMessage","isValidBaseUnitAmount","isNegative","isLessThan","toNumber","hasDecimals","decimalPlaces","isString","_","isFunction","isHexString","test","isETHAddressHex","isAddress","doesBelongToStringEnum","stringEnum","enumValues","values","includes","enumValuesAsStrings","map","enumValue","enumValuesAsString","join","hasAtMostOneUniqueValue","errMsg","uniq","length","isNumber","isFinite","isNumberOrBigNumber","isBoolean","isWeb3Provider","warn","send","sendAsync","doesConformToSchema","schema","subSchemas","undefined","Error","schemaValidator","json_schemas_1","addSchema","bind","validationResult","validate","hasValidationErrors","errors","msg","id","JSON","stringify","isWebUri","isValidUrl","validUrl","isUri","isValidUri","isBlockParam","Number","isInteger","isArray","Array","condition","message","type"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}