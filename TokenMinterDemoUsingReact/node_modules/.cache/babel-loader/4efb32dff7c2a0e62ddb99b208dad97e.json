{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar configured_bignumber_1 = require(\"../../configured_bignumber\");\n\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\n\nvar constants_1 = require(\"../utils/constants\");\n\nvar EncoderMath = require(\"../utils/math\");\n\nvar IntDataType =\n/** @class */\nfunction (_super) {\n  __extends(IntDataType, _super);\n\n  function IntDataType(dataItem, dataTypeFactory) {\n    var _this = _super.call(this, dataItem, dataTypeFactory, IntDataType._SIZE_KNOWN_AT_COMPILE_TIME) || this;\n\n    if (!IntDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate Int with bad input: \" + dataItem);\n    }\n\n    _this._width = IntDataType._decodeWidthFromType(dataItem.type);\n    _this._minValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).times(-1);\n    _this._maxValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).minus(1);\n    return _this;\n  }\n\n  IntDataType.matchType = function (type) {\n    return IntDataType._MATCHER.test(type);\n  };\n\n  IntDataType._decodeWidthFromType = function (type) {\n    var matches = IntDataType._MATCHER.exec(type);\n\n    var width = matches !== null && matches.length === 2 && matches[1] !== undefined ? parseInt(matches[1], constants_1.constants.DEC_BASE) : IntDataType._DEFAULT_WIDTH;\n    return width;\n  };\n\n  IntDataType.prototype.encodeValue = function (value) {\n    var encodedValue = EncoderMath.safeEncodeNumericValue(value, this._minValue, this._maxValue);\n    return encodedValue;\n  };\n\n  IntDataType.prototype.decodeValue = function (calldata) {\n    var valueBuf = calldata.popWord();\n    var value = EncoderMath.safeDecodeNumericValue(valueBuf, this._minValue, this._maxValue);\n\n    if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) {\n      return value.toNumber();\n    }\n\n    return value;\n  };\n\n  IntDataType.prototype.getDefaultValue = function () {\n    var defaultValue = IntDataType._DEFAULT_VALUE;\n\n    if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) {\n      return defaultValue.toNumber();\n    }\n\n    return defaultValue;\n  };\n\n  IntDataType.prototype.getSignatureType = function () {\n    return \"\" + ethereum_types_1.SolidityTypes.Int + this._width;\n  };\n\n  IntDataType._MATCHER = RegExp('^int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256){0,1}$');\n  IntDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\n  IntDataType._MAX_WIDTH = 256;\n  IntDataType._DEFAULT_WIDTH = IntDataType._MAX_WIDTH;\n  IntDataType._DEFAULT_VALUE = new configured_bignumber_1.BigNumber(0);\n  return IntDataType;\n}(blob_1.AbstractBlobDataType);\n\nexports.IntDataType = IntDataType;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AAEA;;AAEA;;AACA;;AAEA;AAAA;AAAA;EAAiCA;;EAyB7B,qBAAmBC,QAAnB,EAAuCC,eAAvC,EAAuE;IAAvE,YACIC,kBAAMF,QAAN,EAAgBC,eAAhB,EAAiCE,WAAW,CAACC,2BAA7C,KAAyE,IAD7E;;IAEI,IAAI,CAACD,WAAW,CAACE,SAAZ,CAAsBL,QAAQ,CAACM,IAA/B,CAAL,EAA2C;MACvC,MAAM,IAAIC,KAAJ,CAAU,8CAA4CP,QAAtD,CAAN;IACH;;IACDQ,KAAI,CAACC,MAAL,GAAcN,WAAW,CAACO,oBAAZ,CAAiCV,QAAQ,CAACM,IAA1C,CAAd;IACAE,KAAI,CAACG,SAAL,GAAiB,IAAIC,gCAAJ,CAAc,CAAd,EAAiBC,eAAjB,CAAiCL,KAAI,CAACC,MAAL,GAAc,CAA/C,EAAkDK,KAAlD,CAAwD,CAAC,CAAzD,CAAjB;IACAN,KAAI,CAACO,SAAL,GAAiB,IAAIH,gCAAJ,CAAc,CAAd,EAAiBC,eAAjB,CAAiCL,KAAI,CAACC,MAAL,GAAc,CAA/C,EAAkDO,KAAlD,CAAwD,CAAxD,CAAjB;;EACH;;EArBab,wBAAd,UAAwBG,IAAxB,EAAoC;IAChC,OAAOH,WAAW,CAACc,QAAZ,CAAqBC,IAArB,CAA0BZ,IAA1B,CAAP;EACH,CAFa;;EAICH,mCAAf,UAAoCG,IAApC,EAAgD;IAC5C,IAAMa,OAAO,GAAGhB,WAAW,CAACc,QAAZ,CAAqBG,IAArB,CAA0Bd,IAA1B,CAAhB;;IACA,IAAMe,KAAK,GACPF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACG,MAAR,KAAmB,CAAvC,IAA4CH,OAAO,CAAC,CAAD,CAAP,KAAeI,SAA3D,GACMC,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,EAAaM,sBAAUC,QAAvB,CADd,GAEMvB,WAAW,CAACwB,cAHtB;IAIA,OAAON,KAAP;EACH,CAPc;;EAmBRlB,oCAAP,UAAmByB,KAAnB,EAAqD;IACjD,IAAMC,YAAY,GAAGC,WAAW,CAACC,sBAAZ,CAAmCH,KAAnC,EAA0C,KAAKjB,SAA/C,EAA0D,KAAKI,SAA/D,CAArB;IACA,OAAOc,YAAP;EACH,CAHM;;EAKA1B,oCAAP,UAAmB6B,QAAnB,EAAwC;IACpC,IAAMC,QAAQ,GAAGD,QAAQ,CAACE,OAAT,EAAjB;IACA,IAAMN,KAAK,GAAGE,WAAW,CAACK,sBAAZ,CAAmCF,QAAnC,EAA6C,KAAKtB,SAAlD,EAA6D,KAAKI,SAAlE,CAAd;;IACA,IAAI,KAAKN,MAAL,KAAgBgB,sBAAUW,uBAA9B,EAAuD;MACnD,OAAOR,KAAK,CAACS,QAAN,EAAP;IACH;;IACD,OAAOT,KAAP;EACH,CAPM;;EASAzB,wCAAP;IACI,IAAMmC,YAAY,GAAGnC,WAAW,CAACoC,cAAjC;;IACA,IAAI,KAAK9B,MAAL,KAAgBgB,sBAAUW,uBAA9B,EAAuD;MACnD,OAAOE,YAAY,CAACD,QAAb,EAAP;IACH;;IACD,OAAOC,YAAP;EACH,CANM;;EAQAnC,yCAAP;IACI,OAAO,KAAGqC,+BAAcC,GAAjB,GAAuB,KAAKhC,MAAnC;EACH,CAFM;;EAxDiBN,uBAAWuC,MAAM,CACrC,gIADqC,CAAjB;EAGAvC,0CAAuC,IAAvC;EACAA,yBAAqB,GAArB;EACAA,6BAAyBA,WAAW,CAACwC,UAArC;EACAxC,6BAAiB,IAAIS,gCAAJ,CAAc,CAAd,CAAjB;EAqD5B;AAAC,CA5DD,CAAiCgC,2BAAjC;;AAAaC","names":["__extends","dataItem","dataTypeFactory","_super","IntDataType","_SIZE_KNOWN_AT_COMPILE_TIME","matchType","type","Error","_this","_width","_decodeWidthFromType","_minValue","configured_bignumber_1","exponentiatedBy","times","_maxValue","minus","_MATCHER","test","matches","exec","width","length","undefined","parseInt","constants_1","DEC_BASE","_DEFAULT_WIDTH","value","encodedValue","EncoderMath","safeEncodeNumericValue","calldata","valueBuf","popWord","safeDecodeNumericValue","NUMBER_OF_BYTES_IN_INT8","toNumber","defaultValue","_DEFAULT_VALUE","ethereum_types_1","Int","RegExp","_MAX_WIDTH","blob_1","exports"],"sources":["../../../../src/abi_encoder/evm_data_types/int.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}