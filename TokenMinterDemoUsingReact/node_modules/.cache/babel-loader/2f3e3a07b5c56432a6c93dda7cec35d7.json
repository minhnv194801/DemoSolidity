{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar baseX$1 = require('../../vendor/base-x.js');\n\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n\n}\n\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n        case this.prefix:\n          {\n            return this.baseDecode(text.slice(1));\n          }\n\n        default:\n          {\n            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n          }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n\n  or(decoder) {\n    return or(this, decoder);\n  }\n\n}\n\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n\n  or(decoder) {\n    return or(this, decoder);\n  }\n\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n\n}\n\nconst or = (left, right) => new ComposedDecoder({ ...(left.decoders || {\n    [left.prefix]: left\n  }),\n  ...(right.decoders || {\n    [right.prefix]: right\n  })\n});\n\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n\n}\n\nconst from = _ref => {\n  let {\n    name,\n    prefix,\n    encode,\n    decode\n  } = _ref;\n  return new Codec(name, prefix, encode, decode);\n};\n\nconst baseX = _ref2 => {\n  let {\n    prefix,\n    name,\n    alphabet\n  } = _ref2;\n  const {\n    encode,\n    decode\n  } = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\n\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  let end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`);\n    }\n\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n};\n\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n};\n\nconst rfc4648 = _ref3 => {\n  let {\n    name,\n    prefix,\n    bitsPerChar,\n    alphabet\n  } = _ref3;\n  return from({\n    prefix,\n    name,\n\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;","map":{"version":3,"names":["Object","defineProperty","exports","value","baseX$1","require","bytes","Encoder","constructor","name","prefix","baseEncode","encode","Uint8Array","Error","Decoder","baseDecode","decode","text","slice","JSON","stringify","or","decoder","ComposedDecoder","decoders","input","RangeError","keys","left","right","Codec","encoder","from","baseX","alphabet","coerce","string","bitsPerChar","codes","i","length","end","out","bits","buffer","written","undefined","SyntaxError","data","pad","mask","rfc4648"],"sources":["D:/Blockchain/test-react/node_modules/multiformats/cjs/src/bases/base.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n      case this.prefix: {\n          return this.baseDecode(text.slice(1));\n        }\n      default: {\n          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n        }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AAEA,MAAME,OAAN,CAAc;EACZC,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAeC,UAAf,EAA2B;IACpC,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,UAAL,GAAkBA,UAAlB;EACD;;EACDC,MAAM,CAACN,KAAD,EAAQ;IACZ,IAAIA,KAAK,YAAYO,UAArB,EAAiC;MAC/B,OAAQ,GAAG,KAAKH,MAAQ,GAAG,KAAKC,UAAL,CAAgBL,KAAhB,CAAwB,EAAnD;IACD,CAFD,MAEO;MACL,MAAMQ,KAAK,CAAC,mCAAD,CAAX;IACD;EACF;;AAZW;;AAcd,MAAMC,OAAN,CAAc;EACZP,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAeM,UAAf,EAA2B;IACpC,KAAKP,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKM,UAAL,GAAkBA,UAAlB;EACD;;EACDC,MAAM,CAACC,IAAD,EAAO;IACX,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5B,QAAQA,IAAI,CAAC,CAAD,CAAZ;QACA,KAAK,KAAKR,MAAV;UAAkB;YACd,OAAO,KAAKM,UAAL,CAAgBE,IAAI,CAACC,KAAL,CAAW,CAAX,CAAhB,CAAP;UACD;;QACH;UAAS;YACL,MAAML,KAAK,CAAE,qCAAqCM,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAsB,KAAK,KAAKT,IAAM,+CAA+C,KAAKC,MAAQ,EAAzI,CAAX;UACD;MANH;IAQD,CATD,MASO;MACL,MAAMI,KAAK,CAAC,mCAAD,CAAX;IACD;EACF;;EACDQ,EAAE,CAACC,OAAD,EAAU;IACV,OAAOD,EAAE,CAAC,IAAD,EAAOC,OAAP,CAAT;EACD;;AAtBW;;AAwBd,MAAMC,eAAN,CAAsB;EACpBhB,WAAW,CAACiB,QAAD,EAAW;IACpB,KAAKA,QAAL,GAAgBA,QAAhB;EACD;;EACDH,EAAE,CAACC,OAAD,EAAU;IACV,OAAOD,EAAE,CAAC,IAAD,EAAOC,OAAP,CAAT;EACD;;EACDN,MAAM,CAACS,KAAD,EAAQ;IACZ,MAAMhB,MAAM,GAAGgB,KAAK,CAAC,CAAD,CAApB;IACA,MAAMH,OAAO,GAAG,KAAKE,QAAL,CAAcf,MAAd,CAAhB;;IACA,IAAIa,OAAJ,EAAa;MACX,OAAOA,OAAO,CAACN,MAAR,CAAeS,KAAf,CAAP;IACD,CAFD,MAEO;MACL,MAAMC,UAAU,CAAE,qCAAqCP,IAAI,CAACC,SAAL,CAAeK,KAAf,CAAuB,+BAA+B1B,MAAM,CAAC4B,IAAP,CAAY,KAAKH,QAAjB,CAA4B,gBAAzH,CAAhB;IACD;EACF;;AAfmB;;AAiBtB,MAAMH,EAAE,GAAG,CAACO,IAAD,EAAOC,KAAP,KAAiB,IAAIN,eAAJ,CAAoB,EAC9C,IAAGK,IAAI,CAACJ,QAAL,IAAiB;IAAE,CAACI,IAAI,CAACnB,MAAN,GAAemB;EAAjB,CAApB,CAD8C;EAE9C,IAAGC,KAAK,CAACL,QAAN,IAAkB;IAAE,CAACK,KAAK,CAACpB,MAAP,GAAgBoB;EAAlB,CAArB;AAF8C,CAApB,CAA5B;;AAIA,MAAMC,KAAN,CAAY;EACVvB,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAeC,UAAf,EAA2BK,UAA3B,EAAuC;IAChD,KAAKP,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKK,UAAL,GAAkBA,UAAlB;IACA,KAAKgB,OAAL,GAAe,IAAIzB,OAAJ,CAAYE,IAAZ,EAAkBC,MAAlB,EAA0BC,UAA1B,CAAf;IACA,KAAKY,OAAL,GAAe,IAAIR,OAAJ,CAAYN,IAAZ,EAAkBC,MAAlB,EAA0BM,UAA1B,CAAf;EACD;;EACDJ,MAAM,CAACc,KAAD,EAAQ;IACZ,OAAO,KAAKM,OAAL,CAAapB,MAAb,CAAoBc,KAApB,CAAP;EACD;;EACDT,MAAM,CAACS,KAAD,EAAQ;IACZ,OAAO,KAAKH,OAAL,CAAaN,MAAb,CAAoBS,KAApB,CAAP;EACD;;AAdS;;AAgBZ,MAAMO,IAAI,GAAG;EAAA,IAAC;IAACxB,IAAD;IAAOC,MAAP;IAAeE,MAAf;IAAuBK;EAAvB,CAAD;EAAA,OAAoC,IAAIc,KAAJ,CAAUtB,IAAV,EAAgBC,MAAhB,EAAwBE,MAAxB,EAAgCK,MAAhC,CAApC;AAAA,CAAb;;AACA,MAAMiB,KAAK,GAAG,SAA8B;EAAA,IAA7B;IAACxB,MAAD;IAASD,IAAT;IAAe0B;EAAf,CAA6B;EAC1C,MAAM;IAACvB,MAAD;IAASK;EAAT,IAAmBb,OAAO,CAAC+B,QAAD,EAAW1B,IAAX,CAAhC;EACA,OAAOwB,IAAI,CAAC;IACVvB,MADU;IAEVD,IAFU;IAGVG,MAHU;IAIVK,MAAM,EAAEC,IAAI,IAAIZ,KAAK,CAAC8B,MAAN,CAAanB,MAAM,CAACC,IAAD,CAAnB;EAJN,CAAD,CAAX;AAMD,CARD;;AASA,MAAMD,MAAM,GAAG,CAACoB,MAAD,EAASF,QAAT,EAAmBG,WAAnB,EAAgC7B,IAAhC,KAAyC;EACtD,MAAM8B,KAAK,GAAG,EAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;IACxCD,KAAK,CAACJ,QAAQ,CAACK,CAAD,CAAT,CAAL,GAAqBA,CAArB;EACD;;EACD,IAAIE,GAAG,GAAGL,MAAM,CAACI,MAAjB;;EACA,OAAOJ,MAAM,CAACK,GAAG,GAAG,CAAP,CAAN,KAAoB,GAA3B,EAAgC;IAC9B,EAAEA,GAAF;EACD;;EACD,MAAMC,GAAG,GAAG,IAAI9B,UAAJ,CAAe6B,GAAG,GAAGJ,WAAN,GAAoB,CAApB,GAAwB,CAAvC,CAAZ;EACA,IAAIM,IAAI,GAAG,CAAX;EACA,IAAIC,MAAM,GAAG,CAAb;EACA,IAAIC,OAAO,GAAG,CAAd;;EACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,GAApB,EAAyB,EAAEF,CAA3B,EAA8B;IAC5B,MAAMrC,KAAK,GAAGoC,KAAK,CAACF,MAAM,CAACG,CAAD,CAAP,CAAnB;;IACA,IAAIrC,KAAK,KAAK4C,SAAd,EAAyB;MACvB,MAAM,IAAIC,WAAJ,CAAiB,OAAOvC,IAAM,YAA9B,CAAN;IACD;;IACDoC,MAAM,GAAGA,MAAM,IAAIP,WAAV,GAAwBnC,KAAjC;IACAyC,IAAI,IAAIN,WAAR;;IACA,IAAIM,IAAI,IAAI,CAAZ,EAAe;MACbA,IAAI,IAAI,CAAR;MACAD,GAAG,CAACG,OAAO,EAAR,CAAH,GAAiB,MAAMD,MAAM,IAAID,IAAjC;IACD;EACF;;EACD,IAAIA,IAAI,IAAIN,WAAR,IAAuB,MAAMO,MAAM,IAAI,IAAID,IAA/C,EAAqD;IACnD,MAAM,IAAII,WAAJ,CAAgB,wBAAhB,CAAN;EACD;;EACD,OAAOL,GAAP;AACD,CA7BD;;AA8BA,MAAM/B,MAAM,GAAG,CAACqC,IAAD,EAAOd,QAAP,EAAiBG,WAAjB,KAAiC;EAC9C,MAAMY,GAAG,GAAGf,QAAQ,CAACA,QAAQ,CAACM,MAAT,GAAkB,CAAnB,CAAR,KAAkC,GAA9C;EACA,MAAMU,IAAI,GAAG,CAAC,KAAKb,WAAN,IAAqB,CAAlC;EACA,IAAIK,GAAG,GAAG,EAAV;EACA,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,MAAM,GAAG,CAAb;;EACA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,IAAI,CAACR,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;IACpCK,MAAM,GAAGA,MAAM,IAAI,CAAV,GAAcI,IAAI,CAACT,CAAD,CAA3B;IACAI,IAAI,IAAI,CAAR;;IACA,OAAOA,IAAI,GAAGN,WAAd,EAA2B;MACzBM,IAAI,IAAIN,WAAR;MACAK,GAAG,IAAIR,QAAQ,CAACgB,IAAI,GAAGN,MAAM,IAAID,IAAlB,CAAf;IACD;EACF;;EACD,IAAIA,IAAJ,EAAU;IACRD,GAAG,IAAIR,QAAQ,CAACgB,IAAI,GAAGN,MAAM,IAAIP,WAAW,GAAGM,IAAhC,CAAf;EACD;;EACD,IAAIM,GAAJ,EAAS;IACP,OAAOP,GAAG,CAACF,MAAJ,GAAaH,WAAb,GAA2B,CAAlC,EAAqC;MACnCK,GAAG,IAAI,GAAP;IACD;EACF;;EACD,OAAOA,GAAP;AACD,CAvBD;;AAwBA,MAAMS,OAAO,GAAG,SAA2C;EAAA,IAA1C;IAAC3C,IAAD;IAAOC,MAAP;IAAe4B,WAAf;IAA4BH;EAA5B,CAA0C;EACzD,OAAOF,IAAI,CAAC;IACVvB,MADU;IAEVD,IAFU;;IAGVG,MAAM,CAACc,KAAD,EAAQ;MACZ,OAAOd,MAAM,CAACc,KAAD,EAAQS,QAAR,EAAkBG,WAAlB,CAAb;IACD,CALS;;IAMVrB,MAAM,CAACS,KAAD,EAAQ;MACZ,OAAOT,MAAM,CAACS,KAAD,EAAQS,QAAR,EAAkBG,WAAlB,EAA+B7B,IAA/B,CAAb;IACD;;EARS,CAAD,CAAX;AAUD,CAXD;;AAaAP,OAAO,CAAC6B,KAAR,GAAgBA,KAAhB;AACA7B,OAAO,CAACgC,KAAR,GAAgBA,KAAhB;AACAhC,OAAO,CAAC+B,IAAR,GAAeA,IAAf;AACA/B,OAAO,CAACoB,EAAR,GAAaA,EAAb;AACApB,OAAO,CAACkD,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}