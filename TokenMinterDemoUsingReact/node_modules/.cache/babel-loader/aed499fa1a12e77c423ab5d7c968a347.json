{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defer = defer;\nexports.splitPath = splitPath;\nexports.eachSeries = eachSeries;\nexports.foreach = foreach;\nexports.doIf = doIf;\nexports.asyncWhile = asyncWhile;\n\nfunction defer() {\n  var resolve = void 0,\n      reject = void 0;\n  var promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise: promise,\n    resolve: resolve,\n    reject: reject\n  };\n} // TODO use bip32-path library\n\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n\n\nfunction splitPath(path) {\n  var result = [];\n  var components = path.split(\"/\");\n  components.forEach(function (element) {\n    var number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\n\nfunction eachSeries(arr, fun) {\n  return arr.reduce(function (p, e) {\n    return p.then(function () {\n      return fun(e);\n    });\n  }, Promise.resolve());\n}\n\nfunction foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    return iterate(0, arr, []);\n  });\n}\n\nfunction doIf(condition, callback) {\n  return Promise.resolve().then(function () {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nfunction asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(function (res) {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}","map":{"version":3,"mappings":";;;;;QAwBgBA;QAWAC;QAkBAC;QAIAC;QAgBAC;QAWAC;;AA5DT,SAASL,KAAT,GAA8B;EACnC,IAAIM,gBAAJ;EAAA,IAAaC,eAAb;EACA,IAAIC,UAAU,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;IACnDL,UAAUI,OAAVJ;IACAC,SAASI,OAATJ;EAFY,EAAd;EAIA,IAAI,CAACD,OAAD,IAAY,CAACC,MAAjB,EAAyB,MAAM,eAAN,CANU,CAMa;;EAChD,OAAO;IAAEC,gBAAF;IAAWF,gBAAX;IAAoBC;EAApB,CAAP;AACD,C,CAED;;AAlCA;;;;;;;;;;;;;;;;;;AAmCO,SAASN,SAAT,CAAmBW,IAAnB,EAA2C;EAChD,IAAIC,SAAS,EAAb;EACA,IAAIC,aAAaF,KAAKG,KAALH,CAAW,GAAXA,CAAjB;EACAE,WAAWE,OAAXF,CAAmB,mBAAW;IAC5B,IAAIG,SAASC,SAASC,OAATD,EAAkB,EAAlBA,CAAb;;IACA,IAAIE,MAAMH,MAANG,CAAJ,EAAmB;MACjB,OADiB,CACT;IACT;;IACD,IAAID,QAAQE,MAARF,GAAiB,CAAjBA,IAAsBA,QAAQA,QAAQE,MAARF,GAAiB,CAAzBA,MAAgC,GAA1D,EAA+D;MAC7DF,UAAU,UAAVA;IACD;;IACDJ,OAAOS,IAAPT,CAAYI,MAAZJ;EARF;EAUA,OAAOA,MAAP;AACD,C,CAED;;;AAEO,SAASX,UAAT,CAAuBqB,GAAvB,EAAiCC,GAAjC,EAAmE;EACxE,OAAOD,IAAIE,MAAJF,CAAW,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUD,EAAEE,IAAFF,CAAO;MAAA,OAAMF,IAAIG,CAAJH,CAAN;IAAP,EAAV;EAAX,GAA2Cf,QAAQH,OAARG,EAA3Cc,CAAP;AACD;;AAEM,SAASpB,OAAT,CACLoB,GADK,EAELM,QAFK,EAGS;EACd,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BnB,MAA/B,EAAuC;IACrC,IAAIkB,SAASC,MAAMX,MAAnB,EAA2B;MACzB,OAAOR,MAAP;IADF,OAGE,OAAOgB,SAASG,MAAMD,KAANC,CAATH,EAAuBE,KAAvBF,EAA8BD,IAA9BC,CAAmC,UAASI,GAAT,EAAc;MACtDpB,OAAOS,IAAPT,CAAYoB,GAAZpB;MACA,OAAOiB,QAAQC,QAAQ,CAAhBD,EAAmBE,KAAnBF,EAA0BjB,MAA1BiB,CAAP;IAFK,EAAP;EAIH;;EACD,OAAOrB,QAAQH,OAARG,GAAkBmB,IAAlBnB,CAAuB;IAAA,OAAMqB,QAAQ,CAARA,EAAWP,GAAXO,EAAgB,EAAhBA,CAAN;EAAvB,EAAP;AACD;;AAEM,SAAS1B,IAAT,CACL8B,SADK,EAELL,QAFK,EAGU;EACf,OAAOpB,QAAQH,OAARG,GAAkBmB,IAAlBnB,CAAuB,YAAM;IAClC,IAAIyB,SAAJ,EAAe;MACb,OAAOL,UAAP;IACD;EAHI,EAAP;AAKD;;AAEM,SAASxB,UAAT,CACL8B,SADK,EAELN,QAFK,EAGc;EACnB,SAASC,OAAT,CAAiBjB,MAAjB,EAAyB;IACvB,IAAI,CAACsB,WAAL,EAAkB;MAChB,OAAOtB,MAAP;IADF,OAEO;MACL,OAAOgB,WAAWD,IAAXC,CAAgB,eAAO;QAC5BhB,OAAOS,IAAPT,CAAYoB,GAAZpB;QACA,OAAOiB,QAAQjB,MAARiB,CAAP;MAFK,EAAP;IAID;EACF;;EACD,OAAOrB,QAAQH,OAARG,CAAgB,EAAhBA,EAAoBmB,IAApBnB,CAAyBqB,OAAzBrB,CAAP;AACD","names":["defer","splitPath","eachSeries","foreach","doIf","asyncWhile","resolve","reject","promise","Promise","success","failure","path","result","components","split","forEach","number","parseInt","element","isNaN","length","push","arr","fun","reduce","p","e","then","callback","iterate","index","array","res","condition","predicate"],"sources":["D:\\Blockchain\\test-react\\node_modules\\@ledgerhq\\hw-app-eth\\src\\utils.js"],"sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\ntype Defer<T> = {\n  promise: Promise<T>,\n  resolve: T => void,\n  reject: any => void\n};\n\nexport function defer<T>(): Defer<T> {\n  let resolve, reject;\n  let promise = new Promise(function(success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n  return { promise, resolve, reject };\n}\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\n// TODO use async await\n\nexport function eachSeries<A>(arr: A[], fun: A => Promise<*>): Promise<*> {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else\n      return callback(array[index], index).then(function(res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function doIf(\n  condition: boolean,\n  callback: () => any | Promise<any>\n): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nexport function asyncWhile<T>(\n  predicate: () => boolean,\n  callback: () => Promise<T>\n): Promise<Array<T>> {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n  return Promise.resolve([]).then(iterate);\n}\n"]},"metadata":{},"sourceType":"script"}