{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _u2fApi = require(\"u2f-api\");\n\nvar _hwTransport = require(\"@ledgerhq/hw-transport\");\n\nvar _hwTransport2 = _interopRequireDefault(_hwTransport);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  var err = new _hwTransport.TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  var result = Buffer.alloc(apdu.length);\n\n  for (var i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nvar webSafe64 = function webSafe64(base64) {\n  return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}; // Convert from web-safe to normal, add trailing \"=\"s\n\n\nvar normal64 = function normal64(base64) {\n  return base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n};\n\nfunction attemptExchange(apdu, timeoutMillis, debug, scrambleKey) {\n  var keyHandle = wrapApdu(apdu, scrambleKey);\n  var challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  var signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n\n  if (debug) {\n    debug(\"=> \" + apdu.toString(\"hex\"));\n  }\n\n  return (0, _u2fApi.sign)(signRequest, timeoutMillis / 1000).then(function (response) {\n    var signatureData = response.signatureData;\n\n    if (typeof signatureData === \"string\") {\n      var data = Buffer.from(normal64(signatureData), \"base64\");\n      var result = data.slice(5);\n\n      if (debug) {\n        debug(\"<= \" + result.toString(\"hex\"));\n      }\n\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nvar transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(function (t) {\n    return t.emit(\"disconnect\");\n  });\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nvar TransportU2F = function (_Transport) {\n  (0, _inherits3.default)(TransportU2F, _Transport);\n  (0, _createClass3.default)(TransportU2F, null, [{\n    key: \"open\",\n\n    /**\n     * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n     */\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_) {\n        var _openTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new TransportU2F());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function open(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return open;\n    }() // this transport is not discoverable but we are going to guess if it is here with isSupported()\n\n  }]);\n\n  function TransportU2F() {\n    (0, _classCallCheck3.default)(this, TransportU2F);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TransportU2F.__proto__ || (0, _getPrototypeOf2.default)(TransportU2F)).call(this));\n\n    transportInstances.push(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(TransportU2F, [{\n    key: \"exchange\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(apdu) {\n        var isU2FError;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return attemptExchange(apdu, this.exchangeTimeout, this.debug, this.scrambleKey);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                isU2FError = (0, _typeof3.default)(_context2.t0.metaData) === \"object\";\n\n                if (!isU2FError) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                if (isTimeoutU2FError(_context2.t0)) {\n                  emitDisconnect();\n                } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n                throw wrapU2FTransportError(_context2.t0, \"Failed to sign with Ledger device: U2F \" + _context2.t0.metaData.type, \"U2F_\" + _context2.t0.metaData.code);\n\n              case 14:\n                throw _context2.t0;\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function exchange(_x3) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return exchange;\n    }()\n  }, {\n    key: \"setScrambleKey\",\n    value: function setScrambleKey(scrambleKey) {\n      this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var i = transportInstances.indexOf(this);\n\n      if (i === -1) {\n        throw new Error(\"invalid transport instance\");\n      }\n\n      transportInstances.splice(i, 1);\n      return _promise2.default.resolve();\n    }\n  }]);\n  return TransportU2F;\n}(_hwTransport2.default);\n\nTransportU2F.isSupported = _u2fApi.isSupported;\n\nTransportU2F.list = function () {\n  return (0, _u2fApi.isSupported)().then(function (supported) {\n    return supported ? [null] : [];\n  });\n};\n\nTransportU2F.listen = function (observer) {\n  var unsubscribed = false;\n  (0, _u2fApi.isSupported)().then(function (supported) {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new _hwTransport.TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: function unsubscribe() {\n      unsubscribed = true;\n    }\n  };\n};\n\nexports.default = TransportU2F;","map":{"version":3,"sources":["../src/TransportU2F.js"],"names":["err","result","Buffer","apdu","i","key","webSafe64","base64","normal64","keyHandle","wrapApdu","challenge","signRequest","version","appId","location","origin","debug","timeoutMillis","signatureData","response","data","transportInstances","t","u2fError","TransportU2F","isSupported","list","supported","listen","unsubscribed","observer","type","descriptor","unsubscribe","_","_openTimeout","attemptExchange","isU2FError","isTimeoutU2FError","emitDisconnect","wrapU2FTransportError","scrambleKey"],"mappings":"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","sourcesContent":["//@flow\n\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport, { TransportError } from \"@ledgerhq/hw-transport\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id);\n  // $FlowFixMe\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu: Buffer, key: Buffer) {\n  const result = Buffer.alloc(apdu.length);\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n  return result;\n}\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nconst webSafe64 = (base64: string) =>\n  base64\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n// Convert from web-safe to normal, add trailing \"=\"s\nconst normal64 = (base64: string) =>\n  base64.replace(/-/g, \"+\").replace(/_/g, \"/\") +\n  \"==\".substring(0, (3 * base64.length) % 4);\n\nfunction attemptExchange(\n  apdu: Buffer,\n  timeoutMillis: number,\n  debug: *,\n  scrambleKey: Buffer\n): Promise<Buffer> {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"hex\"\n  );\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n  if (debug) {\n    debug(\"=> \" + apdu.toString(\"hex\"));\n  }\n  return sign(signRequest, timeoutMillis / 1000).then(response => {\n    const { signatureData } = response;\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      const result = data.slice(5);\n      if (debug) {\n        debug(\"<= \" + result.toString(\"hex\"));\n      }\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(t => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\nexport default class TransportU2F extends Transport<null> {\n  static isSupported = isSupported;\n\n  // this transport is not discoverable but we are going to guess if it is here with isSupported()\n  static list = (): * =>\n    isSupported().then(supported => (supported ? [null] : []));\n\n  static listen = (observer: *) => {\n    let unsubscribed = false;\n    isSupported().then(supported => {\n      if (unsubscribed) return;\n      if (supported) {\n        observer.next({ type: \"add\", descriptor: null });\n        observer.complete();\n      } else {\n        observer.error(\n          new TransportError(\n            \"U2F browser support is needed for Ledger. \" +\n              \"Please use Chrome, Opera or Firefox with a U2F extension. \" +\n              \"Also make sure you're on an HTTPS connection\",\n            \"U2FNotSupported\"\n          )\n        );\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n      }\n    };\n  };\n\n  scrambleKey: Buffer;\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_: *, _openTimeout?: number = 5000): Promise<TransportU2F> {\n    /*try {\n      // This is not a valid exchange at all, but this allows to have a way to know if there is a device.\n      // in case it reaches the timeout, we will throw timeout error, in other case, we will return the U2FTransport.\n      await attemptExchange(\n        Buffer.alloc(0),\n        openTimeout,\n        false,\n        Buffer.alloc(1)\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n          throw wrapU2FTransportError(\n            e,\n            \"Ledger device unreachable.\\n\" +\n              \"Make sure the device is plugged, unlocked and with the correct application opened.\" +\n              (location && location.protocol !== \"https:\"\n                ? \"\\nYou are not running on HTTPS. U2F is likely to not work in unsecure protocol.\"\n                : \"\"),\n            \"Timeout\"\n          );\n        } else {\n          // we don't throw if it's another u2f error\n        }\n      } else {\n        throw e;\n      }\n    }*/\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    transportInstances.push(this);\n  }\n\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    try {\n      return await attemptExchange(\n        apdu,\n        this.exchangeTimeout,\n        this.debug,\n        this.scrambleKey\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        }\n        // the wrapping make error more usable and \"printable\" to the end user.\n        throw wrapU2FTransportError(\n          e,\n          \"Failed to sign with Ledger device: U2F \" + e.metaData.type,\n          \"U2F_\" + e.metaData.code\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  close(): Promise<void> {\n    const i = transportInstances.indexOf(this);\n    if (i === -1) {\n      throw new Error(\"invalid transport instance\");\n    }\n    transportInstances.splice(i, 1);\n    return Promise.resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}