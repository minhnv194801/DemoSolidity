{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chalk_1 = require(\"chalk\");\n\nvar _ = require(\"lodash\");\n\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n  log: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n  header: function (text, padStr) {\n    if (padStr === void 0) {\n      padStr = '=';\n    }\n\n    var padLength = TERMINAL_WIDTH - text.length;\n    var padLengthEnd = (padLength + 1) / 2;\n    var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n    var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n    console.log(padded); // tslint:disable-line:no-console\n  },\n  warn: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n  table: function (columnarData) {\n    var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n      return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n    });\n\n    console.table(formattedColumnarData); // tslint:disable-line:no-console\n  },\n  logWithTime: function (arg) {\n    exports.logUtils.log(\"[\" + chalk_1.default.gray(new Date().toLocaleTimeString()) + \"] \" + arg);\n  }\n};","map":{"version":3,"sources":["../../src/log_utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAM,sBAAsB,GAAG,EAA/B;AACA,IAAM,cAAc,GAAG,CAAC,CAAC,GAAF,CAAM,OAAN,EAAe,gBAAf,KAAoC,sBAA3D;AAEa,OAAA,CAAA,QAAA,GAAW;EACpB,GAAG,EAAH,YAAA;IAAI,IAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;IACA,OAAO,CAAC,GAAR,CAAW,KAAX,CAAA,OAAA,EAAO,QAAA,CAAQ,IAAR,CAAP,EADJ,CAC0B;EACzB,CAHmB;EAIpB,MAAM,EAAN,UAAO,IAAP,EAAqB,MAArB,EAAyC;IAApB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,GAAA;IAAoB;;IACrC,IAAM,SAAS,GAAG,cAAc,GAAG,IAAI,CAAC,MAAxC;IACA,IAAM,YAAY,GAAG,CAAC,SAAS,GAAG,CAAb,IAAkB,CAAvC;IACA,IAAM,UAAU,GAAG,IAAI,CAAC,QAAL,CAAc,cAAc,GAAG,YAA/B,EAA6C,MAA7C,CAAnB;IACA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB,cAAlB,EAAkC,MAAlC,CAAf;IACA,OAAO,CAAC,GAAR,CAAY,MAAZ,EALqC,CAKhB;EACxB,CAVmB;EAWpB,IAAI,EAAJ,YAAA;IAAK,IAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;IACD,OAAO,CAAC,IAAR,CAAY,KAAZ,CAAA,OAAA,EAAO,QAAA,CAAS,IAAT,CAAP,EADJ,CAC2B;EAC1B,CAbmB;EAcpB,KAAK,EAAL,UAAM,YAAN,EAA8C;IAC1C,IAAM,qBAAqB,GAAG,CAAC,CAAC,SAAF,CAAY,YAAZ,EAA0B,UAAC,eAAD,EAAuB,QAAvB,EAAuC;MAC3F,OAAA,CAAC,CAAC,QAAF,CAAW,eAAX,IAA8B,eAAe,CAAC,cAAhB,EAA9B,GAAiE,eAAjE;IAAgF,CADtD,CAA9B;;IAGA,OAAO,CAAC,KAAR,CAAc,qBAAd,EAJ0C,CAIJ;EACzC,CAnBmB;EAoBpB,WAAW,EAAX,UAAY,GAAZ,EAAuB;IACnB,OAAA,CAAA,QAAA,CAAS,GAAT,CAAa,MAAI,OAAA,CAAA,OAAA,CAAM,IAAN,CAAW,IAAI,IAAJ,GAAW,kBAAX,EAAX,CAAJ,GAA+C,IAA/C,GAAoD,GAAjE;EACH;AAtBmB,CAAX","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk_1 = require(\"chalk\");\nvar _ = require(\"lodash\");\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n    log: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.log.apply(console, __spread(args)); // tslint:disable-line:no-console\n    },\n    header: function (text, padStr) {\n        if (padStr === void 0) { padStr = '='; }\n        var padLength = TERMINAL_WIDTH - text.length;\n        var padLengthEnd = (padLength + 1) / 2;\n        var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n        var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n        console.log(padded); // tslint:disable-line:no-console\n    },\n    warn: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console\n    },\n    table: function (columnarData) {\n        var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n            return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n        });\n        console.table(formattedColumnarData); // tslint:disable-line:no-console\n    },\n    logWithTime: function (arg) {\n        exports.logUtils.log(\"[\" + chalk_1.default.gray(new Date().toLocaleTimeString()) + \"] \" + arg);\n    },\n};\n//# sourceMappingURL=log_utils.js.map"]},"metadata":{},"sourceType":"script"}