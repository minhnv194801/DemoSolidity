{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar jsSHA3 = require(\"js-sha3\");\n\nvar _ = require(\"lodash\");\n\nvar random_1 = require(\"./random\");\n\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress: function (address) {\n    // Check each case\n    var unprefixedAddress = address.replace('0x', '');\n    var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n\n    for (var i = 0; i < ADDRESS_LENGTH; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      var hexBase = 16;\n      var lowercaseRange = 7;\n\n      if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  isAddress: function (address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n  padZeros: function (address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n  generatePseudoRandomAddress: function () {\n    var randomBigNum = random_1.generatePseudoRandom256BitNumber();\n    var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n    var addressLengthInBytes = 20;\n    var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\n    return randomAddress;\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA,IAAMA,mBAAmB,GAAG,sBAA5B;AACA,IAAMC,uBAAuB,GAAG,oCAAhC;AACA,IAAMC,cAAc,GAAG,EAAvB;AAEaC,uBAAe;EACxBC,iBAAiB,EAAjB,UAAkBC,OAAlB,EAAiC;IAC7B;IACA,IAAMC,iBAAiB,GAAGD,OAAO,CAACE,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAA1B;IACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBJ,iBAAiB,CAACK,WAAlB,EAAjB,CAApB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,cAApB,EAAoCU,CAAC,EAArC,EAAyC;MACrC;MACA,IAAMC,OAAO,GAAG,EAAhB;MACA,IAAMC,cAAc,GAAG,CAAvB;;MACA,IACKC,QAAQ,CAACP,WAAW,CAACI,CAAD,CAAZ,EAAiBC,OAAjB,CAAR,GAAoCC,cAApC,IACGR,iBAAiB,CAACM,CAAD,CAAjB,CAAqBI,WAArB,OAAuCV,iBAAiB,CAACM,CAAD,CAD5D,IAECG,QAAQ,CAACP,WAAW,CAACI,CAAD,CAAZ,EAAiBC,OAAjB,CAAR,IAAqCC,cAArC,IACGR,iBAAiB,CAACM,CAAD,CAAjB,CAAqBD,WAArB,OAAuCL,iBAAiB,CAACM,CAAD,CAJhE,EAKE;QACE,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH,CApBuB;EAqBxBK,SAAS,EAAT,UAAUZ,OAAV,EAAyB;IACrB,IAAI,CAACL,mBAAmB,CAACkB,IAApB,CAAyBb,OAAzB,CAAL,EAAwC;MACpC;MACA,OAAO,KAAP;IACH,CAHD,MAGO,IAAIJ,uBAAuB,CAACiB,IAAxB,CAA6Bb,OAA7B,CAAJ,EAA2C;MAC9C;MACA,OAAO,IAAP;IACH,CAHM,MAGA;MACH;MACA,IAAMc,yBAAyB,GAAGhB,qBAAaC,iBAAb,CAA+BC,OAA/B,CAAlC;MACA,OAAOc,yBAAP;IACH;EACJ,CAjCuB;EAkCxBC,QAAQ,EAAR,UAASf,OAAT,EAAwB;IACpB,OAAOgB,+BAAaC,CAAC,CAACC,QAAF,CAAWF,iCAAehB,OAAf,CAAX,EAAoCH,cAApC,EAAoD,GAApD,CAAb,CAAP;EACH,CApCuB;EAqCxBsB,2BAA2B,EAA3B;IACI,IAAMC,YAAY,GAAGC,2CAArB;IACA,IAAMC,UAAU,GAAGN,uBAAKI,YAAY,CAACG,QAAb,EAAL,CAAnB;IACA,IAAMC,oBAAoB,GAAG,EAA7B;IACA,IAAMC,aAAa,GAAG,OAAKH,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoBF,oBAApB,EAA0CD,QAA1C,CAAmD,KAAnD,CAA3B;IACA,OAAOE,aAAP;EACH;AA3CuB,CAAf","names":["BASIC_ADDRESS_REGEX","SAME_CASE_ADDRESS_REGEX","ADDRESS_LENGTH","exports","isChecksumAddress","address","unprefixedAddress","replace","addressHash","jsSHA3","keccak256","toLowerCase","i","hexBase","lowercaseRange","parseInt","toUpperCase","isAddress","test","isValidChecksummedAddress","padZeros","ethereumjs_util_1","_","padStart","generatePseudoRandomAddress","randomBigNum","random_1","randomBuff","toString","addressLengthInBytes","randomAddress","slice"],"sources":["../../src/address_utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}