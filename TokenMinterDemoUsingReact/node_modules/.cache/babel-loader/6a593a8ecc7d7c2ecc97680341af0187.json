{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar bip39 = require(\"bip39\");\n\nvar HDNode = require(\"hdkey\");\n\nvar _ = require(\"lodash\");\n\nvar types_1 = require(\"../types\");\n\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar private_key_wallet_1 = require(\"./private_key_wallet\");\n\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'/0\";\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with accounts derived from the supplied mnemonic.\n */\n\nvar MnemonicWalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(MnemonicWalletSubprovider, _super);\n  /**\n   * Instantiates a MnemonicWalletSubprovider. Defaults to baseDerivationPath set to `44'/60'/0'/0`.\n   * This is the default in TestRPC/Ganache, it can be overridden if desired.\n   * @param config Configuration for the mnemonic wallet, must contain the mnemonic\n   * @return MnemonicWalletSubprovider instance\n   */\n\n\n  function MnemonicWalletSubprovider(config) {\n    var _this = this;\n\n    assert_1.assert.isString('mnemonic', config.mnemonic);\n    var baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n    assert_1.assert.isString('baseDerivationPath', baseDerivationPath);\n    var addressSearchLimit = config.addressSearchLimit || DEFAULT_ADDRESS_SEARCH_LIMIT;\n    assert_1.assert.isNumber('addressSearchLimit', addressSearchLimit);\n    _this = _super.call(this) || this;\n    _this._mnemonic = config.mnemonic;\n    _this._baseDerivationPath = baseDerivationPath;\n    _this._addressSearchLimit = addressSearchLimit;\n    _this._derivedKeyInfo = _this._initialDerivedKeyInfo(_this._baseDerivationPath);\n    return _this;\n  }\n  /**\n   * Retrieve the set derivation path\n   * @returns derivation path\n   */\n\n\n  MnemonicWalletSubprovider.prototype.getPath = function () {\n    return this._baseDerivationPath;\n  };\n  /**\n   * Set a desired derivation path when computing the available user addresses\n   * @param baseDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.setPath = function (baseDerivationPath) {\n    this._baseDerivationPath = baseDerivationPath;\n    this._derivedKeyInfo = this._initialDerivedKeyInfo(this._baseDerivationPath);\n  };\n  /**\n   * Retrieve the accounts associated with the mnemonic.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n   * @return An array of accounts\n   */\n\n\n  MnemonicWalletSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n    if (numberOfAccounts === void 0) {\n      numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var derivedKeys, accounts;\n      return __generator(this, function (_a) {\n        derivedKeys = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(this._derivedKeyInfo, numberOfAccounts);\n        accounts = _.map(derivedKeys, function (k) {\n          return k.address;\n        });\n        return [2\n        /*return*/\n        , accounts];\n      });\n    });\n  };\n  /**\n   * Signs a transaction with the account specificed by the `from` field in txParams.\n   * If you've added this Subprovider to your  app's provider, you can simply send\n   * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, signedTx;\n      return __generator(this, function (_a) {\n        if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n          throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n        }\n\n        privateKeyWallet = this._privateKeyWalletForAddress(txParams.from);\n        signedTx = privateKeyWallet.signTransactionAsync(txParams);\n        return [2\n        /*return*/\n        , signedTx];\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address. If you've added the MnemonicWalletSubprovider to\n   * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC request,\n   * and this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (data === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isHexString('data', data);\n            assert_1.assert.isETHAddressHex('address', address);\n            privateKeyWallet = this._privateKeyWalletForAddress(address);\n            return [4\n            /*yield*/\n            , privateKeyWallet.signPersonalMessageAsync(data, address)];\n\n          case 1:\n            sig = _a.sent();\n            return [2\n            /*return*/\n            , sig];\n        }\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing account will be the account\n   * associated with the provided address. If you've added this MnemonicWalletSubprovider to\n   * your app's provider, you can simply send an `eth_signTypedData` JSON RPC request, and\n   * this method will be called auto-magically. If you are not using this via a ProviderEngine\n   *  instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typedData === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isETHAddressHex('address', address);\n            privateKeyWallet = this._privateKeyWalletForAddress(address);\n            return [4\n            /*yield*/\n            , privateKeyWallet.signTypedDataAsync(address, typedData)];\n\n          case 1:\n            sig = _a.sent();\n            return [2\n            /*return*/\n            , sig];\n        }\n      });\n    });\n  };\n\n  MnemonicWalletSubprovider.prototype._privateKeyWalletForAddress = function (address) {\n    var derivedKeyInfo = this._findDerivedKeyInfoForAddress(address);\n\n    var privateKeyHex = derivedKeyInfo.hdKey.privateKey.toString('hex');\n    var privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKeyHex);\n    return privateKeyWallet;\n  };\n\n  MnemonicWalletSubprovider.prototype._findDerivedKeyInfoForAddress = function (address) {\n    var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, this._derivedKeyInfo, this._addressSearchLimit);\n\n    if (matchedDerivedKeyInfo === undefined) {\n      throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n    }\n\n    return matchedDerivedKeyInfo;\n  };\n\n  MnemonicWalletSubprovider.prototype._initialDerivedKeyInfo = function (baseDerivationPath) {\n    var seed = bip39.mnemonicToSeed(this._mnemonic);\n    var hdKey = HDNode.fromMasterSeed(seed); // Walk down to base derivation level (i.e m/44'/60'/0') and create an initial key at that level\n    // all children will then be walked relative (i.e m/0)\n\n    var parentKeyDerivationPath = \"m/\" + baseDerivationPath;\n    var parentHDKeyAtDerivationPath = hdKey.derive(parentKeyDerivationPath);\n    var address = wallet_utils_1.walletUtils.addressOfHDKey(parentHDKeyAtDerivationPath);\n    var derivedKeyInfo = {\n      address: address,\n      baseDerivationPath: baseDerivationPath,\n      derivationPath: parentKeyDerivationPath,\n      hdKey: parentHDKeyAtDerivationPath\n    };\n    return derivedKeyInfo;\n  };\n\n  return MnemonicWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.MnemonicWalletSubprovider = MnemonicWalletSubprovider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA,IAAMA,4BAA4B,GAAG,cAArC;AACA,IAAMC,8BAA8B,GAAG,EAAvC;AACA,IAAMC,4BAA4B,GAAG,IAArC;AAEA;;;;;;AAKA;AAAA;AAAA;EAA+CC;EAM3C;;;;;;;;EAMA,mCAAYC,MAAZ,EAAoD;IAApD;;IACIC,gBAAOC,QAAP,CAAgB,UAAhB,EAA4BF,MAAM,CAACG,QAAnC;IACA,IAAMC,kBAAkB,GAAGJ,MAAM,CAACI,kBAAP,IAA6BR,4BAAxD;IACAK,gBAAOC,QAAP,CAAgB,oBAAhB,EAAsCE,kBAAtC;IACA,IAAMC,kBAAkB,GAAGL,MAAM,CAACK,kBAAP,IAA6BP,4BAAxD;IACAG,gBAAOK,QAAP,CAAgB,oBAAhB,EAAsCD,kBAAtC;IACAE,6BAAO,IAAP;IAEAA,KAAI,CAACC,SAAL,GAAiBR,MAAM,CAACG,QAAxB;IACAI,KAAI,CAACE,mBAAL,GAA2BL,kBAA3B;IACAG,KAAI,CAACG,mBAAL,GAA2BL,kBAA3B;IACAE,KAAI,CAACI,eAAL,GAAuBJ,KAAI,CAACK,sBAAL,CAA4BL,KAAI,CAACE,mBAAjC,CAAvB;;EACH;EACD;;;;;;EAIOI,8CAAP;IACI,OAAO,KAAKJ,mBAAZ;EACH,CAFM;EAGP;;;;;;EAIOI,8CAAP,UAAeT,kBAAf,EAAyC;IACrC,KAAKK,mBAAL,GAA2BL,kBAA3B;IACA,KAAKO,eAAL,GAAuB,KAAKC,sBAAL,CAA4B,KAAKH,mBAAjC,CAAvB;EACH,CAHM;EAIP;;;;;;;;;EAOaI,uDAAb,UAA8BC,gBAA9B,EAAuF;IAAzD;MAAAA;IAAyD;;;;;QAC7EC,WAAW,GAAGC,2BAAYC,0BAAZ,CAAuC,KAAKN,eAA5C,EAA6DG,gBAA7D,CAAd;QACAI,QAAQ,GAAGC,CAAC,CAACC,GAAF,CAAML,WAAN,EAAmB,aAAC;UAAI,QAAC,CAACM,OAAF;QAAS,CAAjC,CAAX;QACN;QAAA;QAAA,EAAOH,QAAP;;;EACH,CAJY;EAMb;;;;;;;;;;EAQaL,2DAAb,UAAkCS,QAAlC,EAA2D;;;;QACvD,IAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAlB,IAA+B,CAACC,qBAAaC,SAAb,CAAuBJ,QAAQ,CAACC,IAAhC,CAApC,EAA2E;UACvE,MAAM,IAAII,KAAJ,CAAUC,gCAAwBC,2BAAlC,CAAN;QACH;;QACKC,gBAAgB,GAAG,KAAKC,2BAAL,CAAiCT,QAAQ,CAACC,IAA1C,CAAnB;QACAS,QAAQ,GAAGF,gBAAgB,CAACG,oBAAjB,CAAsCX,QAAtC,CAAX;QACN;QAAA;QAAA,EAAOU,QAAP;;;EACH,CAPY;EAQb;;;;;;;;;;;;EAUanB,+DAAb,UAAsCqB,IAAtC,EAAoDb,OAApD,EAAmE;;;;;;YAC/D,IAAIa,IAAI,KAAKV,SAAb,EAAwB;cACpB,MAAM,IAAIG,KAAJ,CAAUC,gCAAwBO,iCAAlC,CAAN;YACH;;YACDlC,gBAAOmC,WAAP,CAAmB,MAAnB,EAA2BF,IAA3B;YACAjC,gBAAOoC,eAAP,CAAuB,SAAvB,EAAkChB,OAAlC;YACMS,gBAAgB,GAAG,KAAKC,2BAAL,CAAiCV,OAAjC,CAAnB;YACM;YAAA;YAAA,EAAMS,gBAAgB,CAACQ,wBAAjB,CAA0CJ,IAA1C,EAAgDb,OAAhD,CAAN;;;YAANkB,GAAG,GAAGC,SAAN;YACN;YAAA;YAAA,EAAOD,GAAP;;;;EACH,CATY;EAUb;;;;;;;;;;;;EAUa1B,yDAAb,UAAgCQ,OAAhC,EAAiDoB,SAAjD,EAA2E;;;;;;YACvE,IAAIA,SAAS,KAAKjB,SAAlB,EAA6B;cACzB,MAAM,IAAIG,KAAJ,CAAUC,gCAAwBO,iCAAlC,CAAN;YACH;;YACDlC,gBAAOoC,eAAP,CAAuB,SAAvB,EAAkChB,OAAlC;YACMS,gBAAgB,GAAG,KAAKC,2BAAL,CAAiCV,OAAjC,CAAnB;YACM;YAAA;YAAA,EAAMS,gBAAgB,CAACY,kBAAjB,CAAoCrB,OAApC,EAA6CoB,SAA7C,CAAN;;;YAANF,GAAG,GAAGC,SAAN;YACN;YAAA;YAAA,EAAOD,GAAP;;;;EACH,CARY;;EASL1B,kEAAR,UAAoCQ,OAApC,EAAmD;IAC/C,IAAMsB,cAAc,GAAG,KAAKC,6BAAL,CAAmCvB,OAAnC,CAAvB;;IACA,IAAMwB,aAAa,GAAGF,cAAc,CAACG,KAAf,CAAqBC,UAArB,CAAgCC,QAAhC,CAAyC,KAAzC,CAAtB;IACA,IAAMlB,gBAAgB,GAAG,IAAImB,gDAAJ,CAAgCJ,aAAhC,CAAzB;IACA,OAAOf,gBAAP;EACH,CALO;;EAMAjB,oEAAR,UAAsCQ,OAAtC,EAAqD;IACjD,IAAM6B,qBAAqB,GAAGlC,2BAAYmC,oCAAZ,CAC1B9B,OAD0B,EAE1B,KAAKV,eAFqB,EAG1B,KAAKD,mBAHqB,CAA9B;;IAKA,IAAIwC,qBAAqB,KAAK1B,SAA9B,EAAyC;MACrC,MAAM,IAAIG,KAAJ,CAAaC,gCAAwBwB,eAAxB,GAAuC,IAAvC,GAA4C/B,OAAzD,CAAN;IACH;;IACD,OAAO6B,qBAAP;EACH,CAVO;;EAWArC,6DAAR,UAA+BT,kBAA/B,EAAyD;IACrD,IAAMiD,IAAI,GAAGC,KAAK,CAACC,cAAN,CAAqB,KAAK/C,SAA1B,CAAb;IACA,IAAMsC,KAAK,GAAGU,MAAM,CAACC,cAAP,CAAsBJ,IAAtB,CAAd,CAFqD,CAGrD;IACA;;IACA,IAAMK,uBAAuB,GAAG,OAAKtD,kBAArC;IACA,IAAMuD,2BAA2B,GAAGb,KAAK,CAACc,MAAN,CAAaF,uBAAb,CAApC;IACA,IAAMrC,OAAO,GAAGL,2BAAY6C,cAAZ,CAA2BF,2BAA3B,CAAhB;IACA,IAAMhB,cAAc,GAAG;MACnBtB,OAAO,SADY;MAEnBjB,kBAAkB,oBAFC;MAGnB0D,cAAc,EAAEJ,uBAHG;MAInBZ,KAAK,EAAEa;IAJY,CAAvB;IAMA,OAAOhB,cAAP;EACH,CAfO;;EAgBZ;AAAC,CA7ID,CAA+CoB,+CAA/C;;AAAaC","names":["DEFAULT_BASE_DERIVATION_PATH","DEFAULT_NUM_ADDRESSES_TO_FETCH","DEFAULT_ADDRESS_SEARCH_LIMIT","__extends","config","assert_1","isString","mnemonic","baseDerivationPath","addressSearchLimit","isNumber","_this","_mnemonic","_baseDerivationPath","_addressSearchLimit","_derivedKeyInfo","_initialDerivedKeyInfo","MnemonicWalletSubprovider","numberOfAccounts","derivedKeys","wallet_utils_1","calculateDerivedHDKeyInfos","accounts","_","map","address","txParams","from","undefined","utils_1","isAddress","Error","types_1","FromAddressMissingOrInvalid","privateKeyWallet","_privateKeyWalletForAddress","signedTx","signTransactionAsync","data","DataMissingForSignPersonalMessage","isHexString","isETHAddressHex","signPersonalMessageAsync","sig","_a","typedData","signTypedDataAsync","derivedKeyInfo","_findDerivedKeyInfoForAddress","privateKeyHex","hdKey","privateKey","toString","private_key_wallet_1","matchedDerivedKeyInfo","findDerivedKeyInfoForAddressIfExists","AddressNotFound","seed","bip39","mnemonicToSeed","HDNode","fromMasterSeed","parentKeyDerivationPath","parentHDKeyAtDerivationPath","derive","addressOfHDKey","derivationPath","base_wallet_subprovider_1","exports"],"sources":["../../../src/subproviders/mnemonic_wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}