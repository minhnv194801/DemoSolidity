{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* eslint-disable no-continue */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-prototype-builtins */\n\n\nvar errorClasses = {};\nvar deserializers = {};\n\nvar addCustomErrorDeserializer = exports.addCustomErrorDeserializer = function addCustomErrorDeserializer(name, deserializer) {\n  deserializers[name] = deserializer;\n};\n\nvar createCustomErrorClass = exports.createCustomErrorClass = function createCustomErrorClass(name) {\n  var C = function CustomError(message, fields) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  }; // $FlowFixMe\n\n\n  C.prototype = new Error();\n  errorClasses[name] = C; // $FlowFixMe we can't easily type a subset of Error for now...\n\n  return C;\n}; // inspired from https://github.com/programble/errio/blob/master/index.js\n\n\nvar deserializeError = exports.deserializeError = function deserializeError(object) {\n  if ((typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      var msg = JSON.parse(object.message);\n\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {// nothing\n    }\n\n    var error = void 0;\n\n    if (typeof object.name === \"string\") {\n      var _object = object,\n          name = _object.name;\n      var des = deserializers[name];\n\n      if (des) {\n        error = des(object);\n      } else {\n        var _constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!_constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          _constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(_constructor.prototype);\n\n        try {\n          for (var prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {// sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      error = new Error(object.message);\n    }\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n\n    return error;\n  }\n\n  return new Error(String(object));\n}; // inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\n\n\nvar serializeError = exports.serializeError = function serializeError(value) {\n  if (!value) return value;\n\n  if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n    return destroyCircular(value, []);\n  }\n\n  if (typeof value === \"function\") {\n    return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\n  }\n\n  return value;\n}; // https://www.npmjs.com/package/destroy-circular\n\n\nfunction destroyCircular(from, seen) {\n  var to = {};\n  seen.push(from);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var value = from[key];\n\n      if (typeof value === \"function\") {\n        continue;\n      }\n\n      if (!value || (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") {\n        to[key] = value;\n        continue;\n      }\n\n      if (seen.indexOf(from[key]) === -1) {\n        to[key] = destroyCircular(from[key], seen.slice(0));\n        continue;\n      }\n\n      to[key] = \"[Circular]\";\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n\n  return to;\n}","map":{"version":3,"sources":["../src/helpers.js"],"names":["errorClasses","deserializers","addCustomErrorDeserializer","createCustomErrorClass","C","Object","message","deserializeError","msg","JSON","object","error","name","des","constructor","console","Error","String","serializeError","destroyCircular","value","to","seen","key","from"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;;AAEA,IAAMA,YAAAA,GAAN,EAAA;AACA,IAAMC,aAAAA,GAAN,EAAA;;AAEO,IAAMC,0BAAAA,GAAAA,OAAAA,CAAAA,0BAAAA,GAA6B,SAA7BA,0BAA6B,CAAA,IAAA,EAAA,YAAA,EAGrC;EACHD,aAAAA,CAAAA,IAAAA,CAAAA,GAAAA,YAAAA;AAJK,CAAA;;AAOA,IAAME,sBAAAA,GAAAA,OAAAA,CAAAA,sBAAAA,GAAyB,SAAzBA,sBAAyB,CAAA,IAAA,EAA8B;EAClE,IAAMC,CAAAA,GAAI,SAAA,WAAA,CAAA,OAAA,EAAA,MAAA,EAAwD;IAChEC,MAAAA,CAAAA,MAAAA,CAAAA,IAAAA,EAAAA,MAAAA;IACA,KAAA,IAAA,GAAA,IAAA;IACA,KAAA,OAAA,GAAeC,OAAAA,IAAf,IAAA;IACA,KAAA,KAAA,GAAa,IAAA,KAAA,GAAb,KAAA;EAJF,CAAA,CADkE,CAOlE;;;EACAF,CAAAA,CAAAA,SAAAA,GAAc,IAAdA,KAAc,EAAdA;EAEAJ,YAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAVkE,CAWlE;;EACA,OAAA,CAAA;AAZK,CAAA,C,CAeP;;;AACO,IAAMO,gBAAAA,GAAAA,OAAAA,CAAAA,gBAAAA,GAAmB,SAAnBA,gBAAmB,CAAA,MAAA,EAA0B;EACxD,IAAI,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,MAAA,CAAA,MAAA,QAAA,IAAJ,MAAA,EAA0C;IACxC,IAAI;MACF;MACA,IAAMC,GAAAA,GAAMC,IAAAA,CAAAA,KAAAA,CAAWC,MAAAA,CAAvB,OAAYD,CAAZ;;MACA,IAAID,GAAAA,CAAAA,OAAAA,IAAeA,GAAAA,CAAnB,IAAA,EAA6B;QAC3BE,MAAAA,GAAAA,GAAAA;MACD;IALH,CAAA,CAME,OAAA,CAAA,EAAU,CACV;IACD;;IAED,IAAIC,KAAAA,GAAAA,KAAJ,CAAA;;IACA,IAAI,OAAOD,MAAAA,CAAP,IAAA,KAAJ,QAAA,EAAqC;MAAA,IAAA,OAAA,GAAA,MAAA;MAAA,IAC3BE,IAD2B,GAAA,OAAA,CAAA,IAAA;MAEnC,IAAMC,GAAAA,GAAMZ,aAAAA,CAAZ,IAAYA,CAAZ;;MACA,IAAA,GAAA,EAAS;QACPU,KAAAA,GAAQE,GAAAA,CAARF,MAAQE,CAARF;MADF,CAAA,MAEO;QACL,IAAIG,YAAAA,GAAcF,IAAAA,KAAAA,OAAAA,GAAAA,KAAAA,GAA2BZ,YAAAA,CAA7C,IAA6CA,CAA7C;;QAEA,IAAI,CAAJ,YAAA,EAAkB;UAChBe,OAAAA,CAAAA,IAAAA,CAAa,qCAAA,IAAA,GAAbA,GAAAA;UACAD,YAAAA,GAAcX,sBAAAA,CAAdW,IAAcX,CAAdW;QACD;;QAEDH,KAAAA,GAAQN,MAAAA,CAAAA,MAAAA,CAAcS,YAAAA,CAAtBH,SAAQN,CAARM;;QACA,IAAI;UACF,KAAK,IAAL,IAAA,IAAA,MAAA,EAA2B;YACzB,IAAID,MAAAA,CAAAA,cAAAA,CAAJ,IAAIA,CAAJ,EAAiC;cAC/BC,KAAAA,CAAAA,IAAAA,CAAAA,GAAcD,MAAAA,CAAdC,IAAcD,CAAdC;YACD;UACF;QALH,CAAA,CAME,OAAA,CAAA,EAAU,CACV;QACD;MACF;IAvBH,CAAA,MAwBO;MACLA,KAAAA,GAAQ,IAAA,KAAA,CAAUD,MAAAA,CAAlBC,OAAQ,CAARA;IACD;;IAED,IAAI,CAACA,KAAAA,CAAD,KAAA,IAAgBK,KAAAA,CAApB,iBAAA,EAA6C;MAC3CA,KAAAA,CAAAA,iBAAAA,CAAAA,KAAAA,EAAAA,gBAAAA;IACD;;IACD,OAAA,KAAA;EACD;;EACD,OAAO,IAAA,KAAA,CAAUC,MAAAA,CAAjB,MAAiBA,CAAV,CAAP;AA9CK,CAAA,C,CAiDP;;;AACO,IAAMC,cAAAA,GAAAA,OAAAA,CAAAA,cAAAA,GAAiB,SAAjBA,cAAiB,CAAA,KAAA,EAAkB;EAC9C,IAAI,CAAJ,KAAA,EAAY,OAAA,KAAA;;EACZ,IAAI,CAAA,OAAA,KAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAJ,QAAA,EAA+B;IAC7B,OAAOC,eAAAA,CAAAA,KAAAA,EAAP,EAAOA,CAAP;EACD;;EACD,IAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;IAC/B,OAAA,iBAAqBC,KAAAA,CAAAA,IAAAA,IAArB,WAAA,IAAA,GAAA;EACD;;EACD,OAAA,KAAA;AARK,CAAA,C,CAWP;;;AACA,SAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAA6C;EAC3C,IAAMC,EAAAA,GAAN,EAAA;EACAC,IAAAA,CAAAA,IAAAA,CAAAA,IAAAA;EAF2C,IAAA,yBAAA,GAAA,IAAA;EAAA,IAAA,iBAAA,GAAA,KAAA;EAAA,IAAA,cAAA,GAAA,SAAA;;EAAA,IAAA;IAG3C,KAAA,IAAA,SAAA,GAAkBjB,MAAAA,CAAAA,IAAAA,CAAlB,IAAkBA,EAAlB,MAAA,CAAA,QAAkBA,GAAlB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAqC;MAAA,IAA1BkB,GAA0B,GAAA,KAAA,CAAA,KAAA;MACnC,IAAMH,KAAAA,GAAQI,IAAAA,CAAd,GAAcA,CAAd;;MACA,IAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;QAC/B;MACD;;MACD,IAAI,CAAA,KAAA,IAAU,CAAA,OAAA,KAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAd,QAAA,EAAyC;QACvCH,EAAAA,CAAAA,GAAAA,CAAAA,GAAAA,KAAAA;QACA;MACD;;MACD,IAAIC,IAAAA,CAAAA,OAAAA,CAAaE,IAAAA,CAAbF,GAAaE,CAAbF,MAA4B,CAAhC,CAAA,EAAoC;QAClCD,EAAAA,CAAAA,GAAAA,CAAAA,GAAUF,eAAAA,CAAgBK,IAAAA,CAAhBL,GAAgBK,CAAhBL,EAA2BG,IAAAA,CAAAA,KAAAA,CAArCD,CAAqCC,CAA3BH,CAAVE;QACA;MACD;;MACDA,EAAAA,CAAAA,GAAAA,CAAAA,GAAAA,YAAAA;IACD;EAjB0C,CAAA,CAAA,OAAA,GAAA,EAAA;IAAA,iBAAA,GAAA,IAAA;IAAA,cAAA,GAAA,GAAA;EAAA,CAAA,SAAA;IAAA,IAAA;MAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,MAAA,EAAA;QAAA,SAAA,CAAA,MAAA;MAAA;IAAA,CAAA,SAAA;MAAA,IAAA,iBAAA,EAAA;QAAA,MAAA,cAAA;MAAA;IAAA;EAAA;;EAkB3C,IAAI,OAAOG,IAAAA,CAAP,IAAA,KAAJ,QAAA,EAAmC;IACjCH,EAAAA,CAAAA,IAAAA,GAAUG,IAAAA,CAAVH,IAAAA;EACD;;EACD,IAAI,OAAOG,IAAAA,CAAP,OAAA,KAAJ,QAAA,EAAsC;IACpCH,EAAAA,CAAAA,OAAAA,GAAaG,IAAAA,CAAbH,OAAAA;EACD;;EACD,IAAI,OAAOG,IAAAA,CAAP,KAAA,KAAJ,QAAA,EAAoC;IAClCH,EAAAA,CAAAA,KAAAA,GAAWG,IAAAA,CAAXH,KAAAA;EACD;;EACD,OAAA,EAAA;AACD","sourcesContent":["// @flow\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\nconst deserializers = {};\n\nexport const addCustomErrorDeserializer = (\n  name: string,\n  deserializer: Object => *\n) => {\n  deserializers[name] = deserializer;\n};\n\nexport const createCustomErrorClass = (name: string): Class<any> => {\n  const C = function CustomError(message?: string, fields?: Object) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  };\n  // $FlowFixMe\n  C.prototype = new Error();\n\n  errorClasses[name] = C;\n  // $FlowFixMe we can't easily type a subset of Error for now...\n  return C;\n};\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: mixed): Error => {\n  if (typeof object === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      const msg = JSON.parse(object.message);\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {\n      // nothing\n    }\n\n    let error;\n    if (typeof object.name === \"string\") {\n      const { name } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      error = new Error(object.message);\n    }\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value: mixed) => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: Object, seen) {\n  const to = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n"]},"metadata":{},"sourceType":"script"}