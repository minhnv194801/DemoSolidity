{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar EthereumTx = require(\"ethereumjs-tx\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar HDNode = require(\"hdkey\");\n\nvar _ = require(\"lodash\");\n\nvar semaphore_async_await_1 = require(\"semaphore-async-await\");\n\nvar types_1 = require(\"../types\");\n\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'\";\nvar ASK_FOR_ON_DEVICE_CONFIRMATION = false;\nvar SHOULD_GET_CHAIN_CODE = true;\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * Subprovider for interfacing with a user's [Ledger Nano S](https://www.ledgerwallet.com/products/ledger-nano-s).\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and\n * re-routes them to a Ledger device plugged into the users computer.\n */\n\nvar LedgerSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(LedgerSubprovider, _super);\n  /**\n   * Instantiates a LedgerSubprovider. Defaults to derivationPath set to `44'/60'/0'`.\n   * TestRPC/Ganache defaults to `m/44'/60'/0'/0`, so set this in the configs if desired.\n   * @param config Several available configurations\n   * @return LedgerSubprovider instance\n   */\n\n\n  function LedgerSubprovider(config) {\n    var _this = _super.call(this) || this; // tslint:disable-next-line:no-unused-variable\n\n\n    _this._connectionLock = new semaphore_async_await_1.Lock();\n    _this._networkId = config.networkId;\n    _this._ledgerEthereumClientFactoryAsync = config.ledgerEthereumClientFactoryAsync;\n    _this._baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n    _this._shouldAlwaysAskForConfirmation = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation !== undefined ? config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation : ASK_FOR_ON_DEVICE_CONFIRMATION;\n    _this._addressSearchLimit = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.addressSearchLimit !== undefined ? config.accountFetchingConfigs.addressSearchLimit : DEFAULT_ADDRESS_SEARCH_LIMIT;\n    return _this;\n  }\n  /**\n   * Retrieve the set derivation path\n   * @returns derivation path\n   */\n\n\n  LedgerSubprovider.prototype.getPath = function () {\n    return this._baseDerivationPath;\n  };\n  /**\n   * Set a desired derivation path when computing the available user addresses\n   * @param basDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n   */\n\n\n  LedgerSubprovider.prototype.setPath = function (basDerivationPath) {\n    this._baseDerivationPath = basDerivationPath;\n  };\n  /**\n   * Retrieve a users Ledger accounts. The accounts are derived from the derivationPath,\n   * master public key and chain code. Because of this, you can request as many accounts\n   * as you wish and it only requires a single request to the Ledger device. This method\n   * is automatically called when issuing a `eth_accounts` JSON RPC request via your providerEngine\n   * instance.\n   * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n   * @return An array of accounts\n   */\n\n\n  LedgerSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n    if (numberOfAccounts === void 0) {\n      numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfos, accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _a.sent();\n            derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);\n            accounts = _.map(derivedKeyInfos, function (k) {\n              return k.address;\n            });\n            return [2\n            /*return*/\n            , accounts];\n        }\n      });\n    });\n  };\n  /**\n   * Signs a transaction on the Ledger with the account specificed by the `from` field in txParams.\n   * If you've added the LedgerSubprovider to your app's provider, you can simply send an `eth_sendTransaction`\n   * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  LedgerSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, _a, tx, vIndex, rIndex, sIndex, txHex, fullDerivationPath, result, eip55Constant, signedChainId, err, signedTxHex, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            LedgerSubprovider._validateTxParams(txParams);\n\n            if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n              throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n            }\n\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _b.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txParams.from);\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 2:\n            _a._ledgerClientIfExists = _b.sent();\n            tx = new EthereumTx(txParams);\n            vIndex = 6;\n            tx.raw[vIndex] = Buffer.from([this._networkId]); // v\n\n            rIndex = 7;\n            tx.raw[rIndex] = Buffer.from([]); // r\n\n            sIndex = 8;\n            tx.raw[sIndex] = Buffer.from([]); // s\n\n            txHex = tx.serialize().toString('hex');\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 8,, 10]);\n\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.signTransaction(fullDerivationPath, txHex)];\n\n          case 4:\n            result = _b.sent(); // Store signature in transaction\n\n            tx.r = Buffer.from(result.r, 'hex');\n            tx.s = Buffer.from(result.s, 'hex');\n            tx.v = Buffer.from(result.v, 'hex');\n            eip55Constant = 35;\n            signedChainId = Math.floor((tx.v[0] - eip55Constant) / 2);\n            if (!(signedChainId !== this._networkId)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            err = new Error(types_1.LedgerSubproviderErrors.TooOldLedgerFirmware);\n            throw err;\n\n          case 6:\n            signedTxHex = \"0x\" + tx.serialize().toString('hex');\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 7:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , signedTxHex];\n\n          case 8:\n            err_1 = _b.sent();\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 9:\n            _b.sent();\n\n            throw err_1;\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address.\n   * The Ledger adds the Ethereum signed message prefix on-device.  If you've added\n   * the LedgerSubprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  LedgerSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, _a, fullDerivationPath, result, lowestValidV, v, hexBase, vHex, signature, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (data === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isHexString('data', data);\n            assert_1.assert.isETHAddressHex('address', address);\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _b.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 2:\n            _a._ledgerClientIfExists = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 6,, 8]);\n\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.signPersonalMessage(fullDerivationPath, ethUtil.stripHexPrefix(data))];\n\n          case 4:\n            result = _b.sent();\n            lowestValidV = 27;\n            v = result.v - lowestValidV;\n            hexBase = 16;\n            vHex = v.toString(hexBase);\n\n            if (vHex.length < 2) {\n              vHex = \"0\" + v;\n            }\n\n            signature = \"0x\" + result.r + result.s + vHex;\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , signature];\n\n          case 6:\n            err_2 = _b.sent();\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 7:\n            _b.sent();\n\n            throw err_2;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * eth_signTypedData is currently not supported on Ledger devices.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n\n\n  LedgerSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._createLedgerClientAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ledgerEthereumClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._connectionLock.acquire()];\n\n          case 1:\n            _a.sent();\n\n            if (this._ledgerClientIfExists !== undefined) {\n              this._connectionLock.release();\n\n              throw new Error(types_1.LedgerSubproviderErrors.MultipleOpenConnectionsDisallowed);\n            }\n\n            return [4\n            /*yield*/\n            , this._ledgerEthereumClientFactoryAsync()];\n\n          case 2:\n            ledgerEthereumClient = _a.sent();\n\n            this._connectionLock.release();\n\n            return [2\n            /*return*/\n            , ledgerEthereumClient];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._destroyLedgerClientAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._connectionLock.acquire()];\n\n          case 1:\n            _a.sent();\n\n            if (this._ledgerClientIfExists === undefined) {\n              this._connectionLock.release();\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.transport.close()];\n\n          case 2:\n            _a.sent();\n\n            this._ledgerClientIfExists = undefined;\n\n            this._connectionLock.release();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._initialDerivedKeyInfoAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parentKeyDerivationPath, ledgerResponse, hdKey, address, initialDerivedKeyInfo;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 1:\n            _a._ledgerClientIfExists = _b.sent();\n            parentKeyDerivationPath = \"m/\" + this._baseDerivationPath;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2,, 4, 6]);\n\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.getAddress(parentKeyDerivationPath, this._shouldAlwaysAskForConfirmation, SHOULD_GET_CHAIN_CODE)];\n\n          case 3:\n            ledgerResponse = _b.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            hdKey = new HDNode();\n            hdKey.publicKey = new Buffer(ledgerResponse.publicKey, 'hex');\n            hdKey.chainCode = new Buffer(ledgerResponse.chainCode, 'hex');\n            address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);\n            initialDerivedKeyInfo = {\n              hdKey: hdKey,\n              address: address,\n              derivationPath: parentKeyDerivationPath,\n              baseDerivationPath: this._baseDerivationPath\n            };\n            return [2\n            /*return*/\n            , initialDerivedKeyInfo];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._findDerivedKeyInfoForAddress = function (initalHDKey, address) {\n    var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);\n\n    if (matchedDerivedKeyInfo === undefined) {\n      throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n    }\n\n    return matchedDerivedKeyInfo;\n  };\n\n  return LedgerSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.LedgerSubprovider = LedgerSubprovider;","map":{"version":3,"sources":["../../../src/subproviders/ledger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"@0x/assert\");\nvar utils_1 = require(\"@0x/utils\");\nvar EthereumTx = require(\"ethereumjs-tx\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar HDNode = require(\"hdkey\");\nvar _ = require(\"lodash\");\nvar semaphore_async_await_1 = require(\"semaphore-async-await\");\nvar types_1 = require(\"../types\");\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'\";\nvar ASK_FOR_ON_DEVICE_CONFIRMATION = false;\nvar SHOULD_GET_CHAIN_CODE = true;\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * Subprovider for interfacing with a user's [Ledger Nano S](https://www.ledgerwallet.com/products/ledger-nano-s).\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and\n * re-routes them to a Ledger device plugged into the users computer.\n */\nvar LedgerSubprovider = /** @class */ (function (_super) {\n    __extends(LedgerSubprovider, _super);\n    /**\n     * Instantiates a LedgerSubprovider. Defaults to derivationPath set to `44'/60'/0'`.\n     * TestRPC/Ganache defaults to `m/44'/60'/0'/0`, so set this in the configs if desired.\n     * @param config Several available configurations\n     * @return LedgerSubprovider instance\n     */\n    function LedgerSubprovider(config) {\n        var _this = _super.call(this) || this;\n        // tslint:disable-next-line:no-unused-variable\n        _this._connectionLock = new semaphore_async_await_1.Lock();\n        _this._networkId = config.networkId;\n        _this._ledgerEthereumClientFactoryAsync = config.ledgerEthereumClientFactoryAsync;\n        _this._baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n        _this._shouldAlwaysAskForConfirmation =\n            config.accountFetchingConfigs !== undefined &&\n                config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation !== undefined\n                ? config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation\n                : ASK_FOR_ON_DEVICE_CONFIRMATION;\n        _this._addressSearchLimit =\n            config.accountFetchingConfigs !== undefined &&\n                config.accountFetchingConfigs.addressSearchLimit !== undefined\n                ? config.accountFetchingConfigs.addressSearchLimit\n                : DEFAULT_ADDRESS_SEARCH_LIMIT;\n        return _this;\n    }\n    /**\n     * Retrieve the set derivation path\n     * @returns derivation path\n     */\n    LedgerSubprovider.prototype.getPath = function () {\n        return this._baseDerivationPath;\n    };\n    /**\n     * Set a desired derivation path when computing the available user addresses\n     * @param basDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n     */\n    LedgerSubprovider.prototype.setPath = function (basDerivationPath) {\n        this._baseDerivationPath = basDerivationPath;\n    };\n    /**\n     * Retrieve a users Ledger accounts. The accounts are derived from the derivationPath,\n     * master public key and chain code. Because of this, you can request as many accounts\n     * as you wish and it only requires a single request to the Ledger device. This method\n     * is automatically called when issuing a `eth_accounts` JSON RPC request via your providerEngine\n     * instance.\n     * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n     * @return An array of accounts\n     */\n    LedgerSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n        if (numberOfAccounts === void 0) { numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH; }\n        return __awaiter(this, void 0, void 0, function () {\n            var initialDerivedKeyInfo, derivedKeyInfos, accounts;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._initialDerivedKeyInfoAsync()];\n                    case 1:\n                        initialDerivedKeyInfo = _a.sent();\n                        derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);\n                        accounts = _.map(derivedKeyInfos, function (k) { return k.address; });\n                        return [2 /*return*/, accounts];\n                }\n            });\n        });\n    };\n    /**\n     * Signs a transaction on the Ledger with the account specificed by the `from` field in txParams.\n     * If you've added the LedgerSubprovider to your app's provider, you can simply send an `eth_sendTransaction`\n     * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine\n     * instance, you can call it directly.\n     * @param txParams Parameters of the transaction to sign\n     * @return Signed transaction hex string\n     */\n    LedgerSubprovider.prototype.signTransactionAsync = function (txParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var initialDerivedKeyInfo, derivedKeyInfo, _a, tx, vIndex, rIndex, sIndex, txHex, fullDerivationPath, result, eip55Constant, signedChainId, err, signedTxHex, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        LedgerSubprovider._validateTxParams(txParams);\n                        if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n                            throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n                        }\n                        return [4 /*yield*/, this._initialDerivedKeyInfoAsync()];\n                    case 1:\n                        initialDerivedKeyInfo = _b.sent();\n                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txParams.from);\n                        _a = this;\n                        return [4 /*yield*/, this._createLedgerClientAsync()];\n                    case 2:\n                        _a._ledgerClientIfExists = _b.sent();\n                        tx = new EthereumTx(txParams);\n                        vIndex = 6;\n                        tx.raw[vIndex] = Buffer.from([this._networkId]); // v\n                        rIndex = 7;\n                        tx.raw[rIndex] = Buffer.from([]); // r\n                        sIndex = 8;\n                        tx.raw[sIndex] = Buffer.from([]); // s\n                        txHex = tx.serialize().toString('hex');\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 8, , 10]);\n                        fullDerivationPath = derivedKeyInfo.derivationPath;\n                        return [4 /*yield*/, this._ledgerClientIfExists.signTransaction(fullDerivationPath, txHex)];\n                    case 4:\n                        result = _b.sent();\n                        // Store signature in transaction\n                        tx.r = Buffer.from(result.r, 'hex');\n                        tx.s = Buffer.from(result.s, 'hex');\n                        tx.v = Buffer.from(result.v, 'hex');\n                        eip55Constant = 35;\n                        signedChainId = Math.floor((tx.v[0] - eip55Constant) / 2);\n                        if (!(signedChainId !== this._networkId)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 5:\n                        _b.sent();\n                        err = new Error(types_1.LedgerSubproviderErrors.TooOldLedgerFirmware);\n                        throw err;\n                    case 6:\n                        signedTxHex = \"0x\" + tx.serialize().toString('hex');\n                        return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 7:\n                        _b.sent();\n                        return [2 /*return*/, signedTxHex];\n                    case 8:\n                        err_1 = _b.sent();\n                        return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 9:\n                        _b.sent();\n                        throw err_1;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Sign a personal Ethereum signed message. The signing account will be the account\n     * associated with the provided address.\n     * The Ledger adds the Ethereum signed message prefix on-device.  If you've added\n     * the LedgerSubprovider to your app's provider, you can simply send an `eth_sign`\n     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param data Hex string message to sign\n     * @param address Address of the account to sign with\n     * @return Signature hex string (order: rsv)\n     */\n    LedgerSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var initialDerivedKeyInfo, derivedKeyInfo, _a, fullDerivationPath, result, lowestValidV, v, hexBase, vHex, signature, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (data === undefined) {\n                            throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n                        }\n                        assert_1.assert.isHexString('data', data);\n                        assert_1.assert.isETHAddressHex('address', address);\n                        return [4 /*yield*/, this._initialDerivedKeyInfoAsync()];\n                    case 1:\n                        initialDerivedKeyInfo = _b.sent();\n                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);\n                        _a = this;\n                        return [4 /*yield*/, this._createLedgerClientAsync()];\n                    case 2:\n                        _a._ledgerClientIfExists = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 6, , 8]);\n                        fullDerivationPath = derivedKeyInfo.derivationPath;\n                        return [4 /*yield*/, this._ledgerClientIfExists.signPersonalMessage(fullDerivationPath, ethUtil.stripHexPrefix(data))];\n                    case 4:\n                        result = _b.sent();\n                        lowestValidV = 27;\n                        v = result.v - lowestValidV;\n                        hexBase = 16;\n                        vHex = v.toString(hexBase);\n                        if (vHex.length < 2) {\n                            vHex = \"0\" + v;\n                        }\n                        signature = \"0x\" + result.r + result.s + vHex;\n                        return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 5:\n                        _b.sent();\n                        return [2 /*return*/, signature];\n                    case 6:\n                        err_2 = _b.sent();\n                        return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 7:\n                        _b.sent();\n                        throw err_2;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * eth_signTypedData is currently not supported on Ledger devices.\n     * @param address Address of the account to sign with\n     * @param data the typed data object\n     * @return Signature hex string (order: rsv)\n     */\n    // tslint:disable-next-line:prefer-function-over-method\n    LedgerSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);\n            });\n        });\n    };\n    LedgerSubprovider.prototype._createLedgerClientAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ledgerEthereumClient;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._connectionLock.acquire()];\n                    case 1:\n                        _a.sent();\n                        if (this._ledgerClientIfExists !== undefined) {\n                            this._connectionLock.release();\n                            throw new Error(types_1.LedgerSubproviderErrors.MultipleOpenConnectionsDisallowed);\n                        }\n                        return [4 /*yield*/, this._ledgerEthereumClientFactoryAsync()];\n                    case 2:\n                        ledgerEthereumClient = _a.sent();\n                        this._connectionLock.release();\n                        return [2 /*return*/, ledgerEthereumClient];\n                }\n            });\n        });\n    };\n    LedgerSubprovider.prototype._destroyLedgerClientAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._connectionLock.acquire()];\n                    case 1:\n                        _a.sent();\n                        if (this._ledgerClientIfExists === undefined) {\n                            this._connectionLock.release();\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this._ledgerClientIfExists.transport.close()];\n                    case 2:\n                        _a.sent();\n                        this._ledgerClientIfExists = undefined;\n                        this._connectionLock.release();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LedgerSubprovider.prototype._initialDerivedKeyInfoAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, parentKeyDerivationPath, ledgerResponse, hdKey, address, initialDerivedKeyInfo;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this._createLedgerClientAsync()];\n                    case 1:\n                        _a._ledgerClientIfExists = _b.sent();\n                        parentKeyDerivationPath = \"m/\" + this._baseDerivationPath;\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 6]);\n                        return [4 /*yield*/, this._ledgerClientIfExists.getAddress(parentKeyDerivationPath, this._shouldAlwaysAskForConfirmation, SHOULD_GET_CHAIN_CODE)];\n                    case 3:\n                        ledgerResponse = _b.sent();\n                        return [3 /*break*/, 6];\n                    case 4: return [4 /*yield*/, this._destroyLedgerClientAsync()];\n                    case 5:\n                        _b.sent();\n                        return [7 /*endfinally*/];\n                    case 6:\n                        hdKey = new HDNode();\n                        hdKey.publicKey = new Buffer(ledgerResponse.publicKey, 'hex');\n                        hdKey.chainCode = new Buffer(ledgerResponse.chainCode, 'hex');\n                        address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);\n                        initialDerivedKeyInfo = {\n                            hdKey: hdKey,\n                            address: address,\n                            derivationPath: parentKeyDerivationPath,\n                            baseDerivationPath: this._baseDerivationPath,\n                        };\n                        return [2 /*return*/, initialDerivedKeyInfo];\n                }\n            });\n        });\n    };\n    LedgerSubprovider.prototype._findDerivedKeyInfoForAddress = function (initalHDKey, address) {\n        var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);\n        if (matchedDerivedKeyInfo === undefined) {\n            throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n        }\n        return matchedDerivedKeyInfo;\n    };\n    return LedgerSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider));\nexports.LedgerSubprovider = LedgerSubprovider;\n//# sourceMappingURL=ledger.js.map"]},"metadata":{},"sourceType":"script"}